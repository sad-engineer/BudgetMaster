import os
import sys

from BudgetMasterBackend.examples.common import cleanup_example, get_java_class, setup_example, test_data_manager

sys.path.append(os.path.dirname(os.path.dirname(__file__)))


def main():
    print("=== –¢–µ—Å—Ç DatabaseUtil —á–µ—Ä–µ–∑ JPype ===")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not setup_example():
        return

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã
        DatabaseUtil = get_java_class("util.DatabaseUtil")

        print("‚úÖ –ö–ª–∞—Å—Å—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")

        # –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        test_db_path = test_data_manager.db_manager.db_path
        print(f"–¢–µ—Å—Ç–æ–≤–∞—è –ë–î: {test_db_path}")

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–µ—Å—Ç–æ–≤—É—é –ë–î –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if os.path.exists(test_db_path):
            os.remove(test_db_path)
            print("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –ë–î")

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        print("\n--- –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---")
        try:
            DatabaseUtil.createDatabaseIfNotExists(test_db_path)
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–∞—Ç–∏–≤–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ö SQLite
            if "Failed to delete old native lib" in str(e) or "AccessDeniedException" in str(e):
                print("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º (–Ω–∞—Ç–∏–≤–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ SQLite)")
            else:
                raise e

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –ë–î —Å–æ–∑–¥–∞–ª—Å—è
        if os.path.exists(test_db_path):
            file_size = os.path.getsize(test_db_path)
            print(f"‚úÖ –§–∞–π–ª –ë–î —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
        else:
            print("‚ùå –§–∞–π–ª –ë–î –Ω–µ —Å–æ–∑–¥–∞–Ω")
            return

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ (–Ω–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É)
        print("\n--- –¢–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è ---")
        DatabaseUtil.createDatabaseIfNotExists(test_db_path)
        print("‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –±–µ–∑ –æ—à–∏–±–æ–∫")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î —á–µ—Ä–µ–∑ SQLite
        print("\n--- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î ---")
        try:
            import sqlite3

            conn = sqlite3.connect(test_db_path)
            cursor = conn.cursor()

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = cursor.fetchall()
            print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")

            for table in tables:
                table_name = table[0]
                print(f"üìã –¢–∞–±–ª–∏—Ü–∞: {table_name}")

                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
                cursor.execute(f"PRAGMA table_info({table_name})")
                columns = cursor.fetchall()
                for col in columns:
                    col_id, col_name, col_type, not_null, default_val, pk = col
                    print(f"  - {col_name}: {col_type}" + (" (PK)" if pk else ""))
                print()

            conn.close()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("\n--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---")
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç
            currency_count = DatabaseUtil.getTableRecordCount(test_db_path, "currencies")
            print(f"–î–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç: {currency_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            category_count = DatabaseUtil.getTableRecordCount(test_db_path, "categories")
            print(f"–î–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {category_count}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –≤–∞–ª—é—Ç—ã
            conn = sqlite3.connect(test_db_path)
            cursor = conn.cursor()
            cursor.execute("SELECT title, position FROM currencies ORDER BY position")
            currencies = cursor.fetchall()
            print("–î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –≤–∞–ª—é—Ç—ã:")
            for title, position in currencies:
                print(f"  {position}. {title}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            cursor.execute("""
                SELECT c1.title as parent_title, c2.title, c2.operation_type, c2.type, c2.position 
                FROM categories c1 
                LEFT JOIN categories c2 ON c1.id = c2.parent_id 
                WHERE c1.parent_id IS NULL 
                ORDER BY c1.operation_type, c1.position, c2.position
            """)
            hierarchical_categories = cursor.fetchall()
            print("–ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
            
            current_parent = None
            for parent_title, child_title, operation_type, cat_type, position in hierarchical_categories:
                if parent_title != current_parent:
                    operation_str = "–†–∞—Å—Ö–æ–¥—ã" if operation_type == 1 else "–î–æ—Ö–æ–¥—ã"
                    print(f"  üìÅ {parent_title} ({operation_str})")
                    current_parent = parent_title
                
                if child_title:
                    type_str = "–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è" if cat_type == 0 else "–î–æ—á–µ—Ä–Ω—è—è"
                    print(f"    ‚îî‚îÄ {child_title} (—Ç–∏–ø: {type_str})")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            cursor.execute("SELECT COUNT(*) FROM categories")
            total_categories = cursor.fetchone()[0]
            print(f"\n–í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {total_categories}")
            
            conn.close()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")

        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()

    finally:
        # –û—á–∏—Å—Ç–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
        cleanup_example()


if __name__ == "__main__":
    main()
