// -*- coding: utf-8 -*-
package com.sadengineer.budgetmaster.backend.util;

import com.sadengineer.budgetmaster.backend.database.DatabaseConnection;
import com.sadengineer.budgetmaster.backend.database.DatabaseFactory;
import java.util.*;

import static com.sadengineer.budgetmaster.backend.constants.RepositoryConstants.*;
import static com.sadengineer.budgetmaster.backend.constants.ModelConstants.*;

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 * 
 * <p>–°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è:
 * <ul>
 *   <li>–û—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü</li>
 *   <li>–°–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü</li>
 *   <li>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
 *   <li>–ü–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</li>
 * </ul>
 * 
 * <p>–í—Å–µ –º–µ—Ç–æ–¥—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –Ω–æ–≤—ã–π DatabaseConnection API,
 * —á—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Android –∏ JDBC –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏.
 */
public class DatabaseUtil {

    /**
     * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     * @param dbPath –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    public static void clearAllData(String dbPath) {
        String[] tables = {TABLE_OPERATIONS, TABLE_BUDGETS, TABLE_CATEGORIES, TABLE_ACCOUNTS, TABLE_CURRENCIES};
        for (String table : tables) {
            clearTable(dbPath, table);
        }
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
     * @param dbPath –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     * @param tableName –∏–º—è —Ç–∞–±–ª–∏—Ü—ã
     */
    public static void clearTable(String dbPath, String tableName) {
        DatabaseConnection connection = DatabaseFactory.createConnection(dbPath);
        try {
            // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
            connection.executeUpdate("PRAGMA foreign_keys = OFF");
            // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            connection.executeUpdate("DELETE FROM " + tableName);
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞
            connection.executeUpdate("DELETE FROM sqlite_sequence WHERE name = '" + tableName + "'");
            // –í–∫–ª—é—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –æ–±—Ä–∞—Ç–Ω–æ
            connection.executeUpdate("PRAGMA foreign_keys = ON");
        } finally {
            connection.close();
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
     * @param dbPath –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    public static void createDatabaseIfNotExists(String dbPath) {
        DatabaseConnection connection = DatabaseFactory.createConnection(dbPath);
        try {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É UTF-8 –¥–ª—è –±–∞–∑—ã
            connection.executeUpdate("PRAGMA encoding = 'UTF-8'");
            connection.executeUpdate("PRAGMA foreign_keys = ON");
            connection.executeUpdate("PRAGMA case_sensitive_like = OFF");
            
            // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            createTables(connection);
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –≤–∞–ª—é—Ç—ã
            initializeDefaultCurrencies(connection);
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            initializeDefaultCategories(connection);
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Å—á–µ—Ç–∞
            initializeDefaultAccounts(connection);
        } finally {
            connection.close();
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
     * @param dbPath –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     * @param tableName –∏–º—è —Ç–∞–±–ª–∏—Ü—ã
     * @return –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
     */
    public static int getTableRecordCount(String dbPath, String tableName) {
        DatabaseConnection connection = DatabaseFactory.createConnection(dbPath);
        try {
            String sql = "SELECT COUNT(*) FROM " + tableName;
            return connection.executeQuerySingle(sql, row -> row.getInt(1)).orElse(0);
        } finally {
            connection.close();
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤–æ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
     * @param dbPath –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     * @return –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
     */
    public static int getTotalRecordCount(String dbPath) {
        String[] tables = {TABLE_CURRENCIES, TABLE_CATEGORIES, TABLE_ACCOUNTS, TABLE_BUDGETS, TABLE_OPERATIONS};
        int total = 0;
        for (String table : tables) {
            total += getTableRecordCount(dbPath, table);
        }
        return total;
    }

    /**
     * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     * @param dbPath –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    public static void restoreDefaultCategories(String dbPath) {
        // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        clearTable(dbPath, TABLE_CATEGORIES);
        // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        DatabaseConnection connection = DatabaseFactory.createConnection(dbPath);
        try {
            initializeDefaultCategories(connection);
        } finally {
            connection.close();
        }
    }

    /**
     * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –≤–∞–ª—é—Ç—ã
     * @param dbPath –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    public static void restoreDefaultCurrencies(String dbPath) {
        // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤–∞–ª—é—Ç
        clearTable(dbPath, TABLE_CURRENCIES);
        // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞–ª—é—Ç—ã
        DatabaseConnection connection = DatabaseFactory.createConnection(dbPath);
        try {
            initializeDefaultCurrencies(connection);
        } finally {
            connection.close();
        }
    }
    
    /**
     * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–æ –≤—Å–µ–π –±–∞–∑–µ
     * @param dbPath –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    public static void restoreDefaults(String dbPath) {
        System.out.println("üîÑ restoreDefaults: –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö");
        
        // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        clearAllData(dbPath);
        System.out.println("üîÑ restoreDefaults: –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã");
        
        // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        DatabaseConnection connection = DatabaseFactory.createConnection(dbPath);
        try {
            initializeDefaultCurrencies(connection);
            System.out.println("üîÑ restoreDefaults: –í–∞–ª—é—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
            
            initializeDefaultCategories(connection);
            System.out.println("üîÑ restoreDefaults: –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
            
            initializeDefaultAccounts(connection);
            System.out.println("üîÑ restoreDefaults: –°—á–µ—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
        } finally {
            connection.close();
        }
        
        System.out.println("üîÑ restoreDefaults: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
     * @param connection —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
     */
    private static void createTables(DatabaseConnection connection) {
        // –¢–∞–±–ª–∏—Ü–∞ –≤–∞–ª—é—Ç
        connection.executeUpdate(
                "CREATE TABLE IF NOT EXISTS " + TABLE_CURRENCIES + " (" + 
                COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, " +
                COLUMN_TITLE + " TEXT NOT NULL, " +
                COLUMN_POSITION + " INTEGER NOT NULL, " +
                COLUMN_CREATED_BY + " TEXT, " +
                COLUMN_UPDATED_BY + " TEXT, " +
                COLUMN_DELETED_BY + " TEXT, " +
                COLUMN_CREATE_TIME + " TIMESTAMP NOT NULL, " +
                COLUMN_UPDATE_TIME + " TIMESTAMP, " +
                COLUMN_DELETE_TIME + " TIMESTAMP" +
                ")");
        // –¢–∞–±–ª–∏—Ü–∞ —Å—á–µ—Ç–æ–≤
        connection.executeUpdate(
                "CREATE TABLE IF NOT EXISTS " + TABLE_ACCOUNTS + " (" + 
                COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, " +
                COLUMN_TITLE + " TEXT NOT NULL, " +
                COLUMN_POSITION + " INTEGER NOT NULL, " +
                COLUMN_AMOUNT + " INTEGER NOT NULL, " +
                COLUMN_TYPE + " INTEGER NOT NULL, " +
                COLUMN_CURRENCY_ID + " INTEGER NOT NULL, " +
                COLUMN_CLOSED + " INTEGER NOT NULL DEFAULT " + ACCOUNT_STATUS_OPEN + ", " +
                COLUMN_CREDIT_CARD_LIMIT + " INTEGER, " +
                COLUMN_CREDIT_CARD_CATEGORY_ID + " INTEGER, " +
                COLUMN_CREDIT_CARD_COMMISSION_CATEGORY_ID + " INTEGER, " +
                COLUMN_CREATED_BY + " TEXT, " +
                COLUMN_UPDATED_BY + " TEXT, " +
                COLUMN_DELETED_BY + " TEXT, " +
                COLUMN_CREATE_TIME + " TIMESTAMP NOT NULL, " +
                COLUMN_UPDATE_TIME + " TIMESTAMP, " +
                COLUMN_DELETE_TIME + " TIMESTAMP, " +
                "FOREIGN KEY (" + COLUMN_CURRENCY_ID + ") REFERENCES " + TABLE_CURRENCIES + " (" + COLUMN_ID + ")" +
                ")");
        // –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        connection.executeUpdate(
                "CREATE TABLE IF NOT EXISTS " + TABLE_CATEGORIES + " (" + 
                COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, " +
                COLUMN_TITLE + " TEXT NOT NULL, " +
                COLUMN_POSITION + " INTEGER NOT NULL, " +
                COLUMN_OPERATION_TYPE + " INTEGER NOT NULL, " +
                COLUMN_TYPE + " INTEGER NOT NULL, " +
                COLUMN_PARENT_ID + " INTEGER, " +
                COLUMN_CREATED_BY + " TEXT, " +
                COLUMN_UPDATED_BY + " TEXT, " +
                COLUMN_DELETED_BY + " TEXT, " +
                COLUMN_CREATE_TIME + " TIMESTAMP NOT NULL, " +
                COLUMN_UPDATE_TIME + " TIMESTAMP, " +
                COLUMN_DELETE_TIME + " TIMESTAMP, " +
                "FOREIGN KEY (" + COLUMN_PARENT_ID + ") REFERENCES " + TABLE_CATEGORIES + " (" + COLUMN_ID + ")" +
                ")");
        // –¢–∞–±–ª–∏—Ü–∞ –±—é–¥–∂–µ—Ç–æ–≤
        connection.executeUpdate(
                "CREATE TABLE IF NOT EXISTS " + TABLE_BUDGETS + " (" + 
                COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, " +
                COLUMN_AMOUNT + " INTEGER NOT NULL, " +
                COLUMN_CURRENCY_ID + " INTEGER NOT NULL, " +
                COLUMN_CATEGORY_ID + " INTEGER, " +
                COLUMN_POSITION + " INTEGER NOT NULL, " +
                COLUMN_CREATED_BY + " TEXT, " +
                COLUMN_UPDATED_BY + " TEXT, " +
                COLUMN_DELETED_BY + " TEXT, " +
                COLUMN_CREATE_TIME + " TIMESTAMP NOT NULL, " +
                COLUMN_UPDATE_TIME + " TIMESTAMP, " +
                COLUMN_DELETE_TIME + " TIMESTAMP, " +
                "FOREIGN KEY (" + COLUMN_CURRENCY_ID + ") REFERENCES " + TABLE_CURRENCIES + " (" + COLUMN_ID + "), " +
                "FOREIGN KEY (" + COLUMN_CATEGORY_ID + ") REFERENCES " + TABLE_CATEGORIES + " (" + COLUMN_ID + ")" +
                ")");
        // –¢–∞–±–ª–∏—Ü–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
        connection.executeUpdate(
                "CREATE TABLE IF NOT EXISTS " + TABLE_OPERATIONS + " (" + 
                COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, " +
                COLUMN_TYPE + " INTEGER NOT NULL, " +
                COLUMN_DATE + " TIMESTAMP NOT NULL, " +
                COLUMN_AMOUNT + " INTEGER NOT NULL, " +
                COLUMN_COMMENT + " TEXT NOT NULL, " +
                COLUMN_CATEGORY_ID + " INTEGER NOT NULL, " +
                COLUMN_ACCOUNT_ID + " INTEGER NOT NULL, " +
                COLUMN_CURRENCY_ID + " INTEGER NOT NULL, " +
                COLUMN_TO_ACCOUNT_ID + " INTEGER, " +
                COLUMN_TO_CURRENCY_ID + " INTEGER, " +
                COLUMN_TO_AMOUNT + " INTEGER, " +
                COLUMN_CREATED_BY + " TEXT, " +
                COLUMN_UPDATED_BY + " TEXT, " +
                COLUMN_DELETED_BY + " TEXT, " +
                COLUMN_CREATE_TIME + " TIMESTAMP NOT NULL, " +
                COLUMN_UPDATE_TIME + " TIMESTAMP, " +
                COLUMN_DELETE_TIME + " TIMESTAMP, " +
                "FOREIGN KEY (" + COLUMN_CATEGORY_ID + ") REFERENCES " + TABLE_CATEGORIES + " (" + COLUMN_ID + "), " +
                "FOREIGN KEY (" + COLUMN_ACCOUNT_ID + ") REFERENCES " + TABLE_ACCOUNTS + " (" + COLUMN_ID + "), " +
                "FOREIGN KEY (" + COLUMN_CURRENCY_ID + ") REFERENCES " + TABLE_CURRENCIES + " (" + COLUMN_ID + "), " +
                "FOREIGN KEY (" + COLUMN_TO_ACCOUNT_ID + ") REFERENCES " + TABLE_ACCOUNTS + " (" + COLUMN_ID + "), " +
                "FOREIGN KEY (" + COLUMN_TO_CURRENCY_ID + ") REFERENCES " + TABLE_CURRENCIES + " (" + COLUMN_ID + ")" +
                ")");
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
     * @param connection —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
     */
    private static void initializeDefaultCategories(DatabaseConnection connection) {
        // Check if categories already exist in table
        String countSql = "SELECT COUNT(*) FROM " + TABLE_CATEGORIES;
        int count = connection.executeQuerySingle(countSql, row -> row.getInt(1)).orElse(0);
        if (count > 0) {
            // Categories already exist, don't add
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        connection.executeUpdate("INSERT INTO " + TABLE_CATEGORIES + " (title, position, operation_type, type, parent_id, created_by, create_time) VALUES ('–î–æ—Ö–æ–¥—ã', 1, " + OPERATION_TYPE_INCOME + ", " + CATEGORY_TYPE_PARENT + ", NULL, 'initializer', datetime('now'))");
        connection.executeUpdate("INSERT INTO " + TABLE_CATEGORIES + " (title, position, operation_type, type, parent_id, created_by, create_time) VALUES ('–†–∞—Å—Ö–æ–¥—ã', 2, " + OPERATION_TYPE_EXPENSE + ", " + CATEGORY_TYPE_PARENT + ", NULL, 'initializer', datetime('now'))");
        
        // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        String parentCategoriesSql = "SELECT id, title, position FROM " + TABLE_CATEGORIES + " WHERE position IN (1, 2) ORDER BY position";
        List<Map<String, Object>> parentCategories = connection.executeQuery(parentCategoriesSql, row -> {
            Map<String, Object> map = new HashMap<>();
            map.put("id", row.getInt("id"));
            map.put("title", row.getString("title"));
            map.put("position", row.getInt("position"));
            return map;
        });
        
        int incomeParentId = 0, expenseParentId = 0;
        for (Map<String, Object> category : parentCategories) {
            int id = (Integer) category.get("id");
            int position = (Integer) category.get("position");
            
            if (position == 1) {
                incomeParentId = id;
            } else if (position == 2) {
                expenseParentId = id;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –ø–æ–ª—É—á–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        if (incomeParentId == 0 || expenseParentId == 0) {
            throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π");
        }
        
        // –°–æ–∑–¥–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤
        String[] incomeCategoryTitles = {"–†–∞–±–æ—Ç–∞", "–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞", "–ü–æ–¥–∞—Ä–∫–∏"};
        int incomePosition = 3;
        for (String title : incomeCategoryTitles) {
            connection.executeUpdate("INSERT INTO " + TABLE_CATEGORIES + " (title, position, operation_type, type, parent_id, created_by, create_time) VALUES ('" + title + "', " + incomePosition + ", " + OPERATION_TYPE_INCOME + ", " + CATEGORY_TYPE_CHILD + ", " + incomeParentId + ", 'initializer', datetime('now'))");
            incomePosition++;
        }

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
        connection.executeUpdate("INSERT INTO " + TABLE_CATEGORIES + " (title, position, operation_type, type, parent_id, created_by, create_time) VALUES ('–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ', 6, " + OPERATION_TYPE_EXPENSE + ", " + CATEGORY_TYPE_CHILD + ", " + expenseParentId + ", 'initializer', datetime('now'))");
        connection.executeUpdate("INSERT INTO " + TABLE_CATEGORIES + " (title, position, operation_type, type, parent_id, created_by, create_time) VALUES ('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ', 7, " + OPERATION_TYPE_EXPENSE + ", " + CATEGORY_TYPE_CHILD + ", " + expenseParentId + ", 'initializer', datetime('now'))");
        
        // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        String intermediateCategoriesSql = "SELECT id, title, position FROM " + TABLE_CATEGORIES + " WHERE position IN (6, 7) ORDER BY position";
        List<Map<String, Object>> intermediateCategories = connection.executeQuery(intermediateCategoriesSql, row -> {
            Map<String, Object> map = new HashMap<>();
            map.put("id", row.getInt("id"));
            map.put("title", row.getString("title"));
            map.put("position", row.getInt("position"));
            return map;
        });
        
        int necessaryId = 0, additionalId = 0;
        for (Map<String, Object> category : intermediateCategories) {
            int id = (Integer) category.get("id");
            int position = (Integer) category.get("position");
            
            if (position == 6) {
                necessaryId = id;
            } else if (position == 7) {
                additionalId = id;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –ø–æ–ª—É—á–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        if (necessaryId == 0 || additionalId == 0) {
            throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π");
        }
        
        // –°–æ–∑–¥–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
        String[] necessaryCategoryTitles = {"–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ", "–ü—Ä–æ–¥—É–∫—Ç—ã", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ú–µ–¥–∏—Ü–∏–Ω–∞", "–û–¥–µ–∂–¥–∞", "–ù–∞–ª–æ–≥–∏"};
        int necessaryPosition = 8;
        for (String title : necessaryCategoryTitles) {
            connection.executeUpdate("INSERT INTO " + TABLE_CATEGORIES + " (title, position, operation_type, type, parent_id, created_by, create_time) VALUES ('" + title + "', " + necessaryPosition + ", " + OPERATION_TYPE_EXPENSE + ", " + CATEGORY_TYPE_CHILD + ", " + necessaryId + ", 'initializer', datetime('now'))");
            necessaryPosition++;
        }
        
        // –°–æ–∑–¥–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
        String[] additionalCategoryTitles = {"–î–æ–º–∞—à–Ω–∏–µ –Ω—É–∂–¥—ã", "–ö–∏–Ω–æ", "–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã", "–ü–æ–¥–∞—Ä–∫–∏"};
        int additionalPosition = 14;
        for (String title : additionalCategoryTitles) {
            connection.executeUpdate("INSERT INTO " + TABLE_CATEGORIES + " (title, position, operation_type, type, parent_id, created_by, create_time) VALUES ('" + title + "', " + additionalPosition + ", " + OPERATION_TYPE_EXPENSE + ", " + CATEGORY_TYPE_CHILD + ", " + additionalId + ", 'initializer', datetime('now'))");
            additionalPosition++;
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –≤–∞–ª—é—Ç—ã
     * @param connection —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
     */
    private static void initializeDefaultCurrencies(DatabaseConnection connection) {
        // Check if currencies already exist in table
        String countSql = "SELECT COUNT(*) FROM " + TABLE_CURRENCIES;
        int count = connection.executeQuerySingle(countSql, row -> row.getInt(1)).orElse(0);
        if (count > 0) {
            // Currencies already exist, don't add
            return;
        }
        
        // –ú–∞—Å—Å–∏–≤ –≤–∞–ª—é—Ç: [–Ω–∞–∑–≤–∞–Ω–∏–µ, –ø–æ–∑–∏—Ü–∏—è]
        String[][] currencies = {
            {"–†—É–±–ª—å", "1"},
            {"–î–æ–ª–ª–∞—Ä", "2"},
            {"–ï–≤—Ä–æ", "3"},
        };
        
        for (String[] currencyInfo : currencies) {
            connection.executeUpdate("INSERT INTO " + TABLE_CURRENCIES + " (title, position, created_by, create_time) VALUES ('" + currencyInfo[0] + "', " + currencyInfo[1] + ", 'initializer', datetime('now'))");
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Å—á–µ—Ç–∞
     * @param connection —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
     */
    private static void initializeDefaultAccounts(DatabaseConnection connection) {
        System.out.println("üîÑ initializeDefaultAccounts: –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å—á–µ—Ç–æ–≤");
        
        // Check if accounts already exist in table
        String countSql = "SELECT COUNT(*) FROM " + TABLE_ACCOUNTS;
        int count = connection.executeQuerySingle(countSql, row -> row.getInt(1)).orElse(0);
        System.out.println("üîÑ initializeDefaultAccounts: –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—á–µ—Ç–æ–≤: " + count);
        
        if (count > 0) {
            // Accounts already exist, don't add
            System.out.println("üîÑ initializeDefaultAccounts: –°—á–µ—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
            return;
        }
        
        // –ú–∞—Å—Å–∏–≤ —Å—á–µ—Ç–æ–≤: [–Ω–∞–∑–≤–∞–Ω–∏–µ, —Ç–∏–ø, –≤–∞–ª—é—Ç–∞, –∑–∞–∫—Ä—ã—Ç]
        String[][] accounts = {
            {"–ù–∞–ª–∏—á–Ω—ã–µ", String.valueOf(ACCOUNT_TYPE_CURRENT), String.valueOf(DEFAULT_CURRENCY_ID), String.valueOf(ACCOUNT_STATUS_OPEN)},
            {"–ó–∞—Ä–ø–ª–∞—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞", String.valueOf(ACCOUNT_TYPE_CURRENT), String.valueOf(DEFAULT_CURRENCY_ID), String.valueOf(ACCOUNT_STATUS_OPEN)},
            {"–°–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç", String.valueOf(ACCOUNT_TYPE_SAVINGS), String.valueOf(DEFAULT_CURRENCY_ID), String.valueOf(ACCOUNT_STATUS_OPEN)},
            {"–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞", String.valueOf(ACCOUNT_TYPE_CREDIT), String.valueOf(DEFAULT_CURRENCY_ID), String.valueOf(ACCOUNT_STATUS_OPEN)},
            {"–ö–∞—Ä—Ç–∞ —Ä–∞—Å—Å—Ä–æ—á–∫–∏", String.valueOf(ACCOUNT_TYPE_CREDIT), String.valueOf(DEFAULT_CURRENCY_ID), String.valueOf(ACCOUNT_STATUS_OPEN)},
        };
        
        System.out.println("üîÑ initializeDefaultAccounts: –î–æ–±–∞–≤–ª—è–µ–º " + accounts.length + " —Å—á–µ—Ç–æ–≤");
        for (String[] acc : accounts) {
            String sql = "INSERT INTO " + TABLE_ACCOUNTS + " (title, amount, type, currency_id, closed, position, created_by, create_time) VALUES ('" + acc[0] + "', 0, " + acc[1] + ", " + acc[2] + ", " + acc[3] + ", " + acc[1] + ", 'initializer', datetime('now'))";
            System.out.println("üîÑ initializeDefaultAccounts: –í—ã–ø–æ–ª–Ω—è–µ–º SQL: " + sql);
            connection.executeUpdate(sql);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        int finalCount = connection.executeQuerySingle(countSql, row -> row.getInt(1)).orElse(0);
        System.out.println("üîÑ initializeDefaultAccounts: –§–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—á–µ—Ç–æ–≤: " + finalCount);
    }
} 