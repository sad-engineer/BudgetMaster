Технологические стэки проекта:


=== ЯЗЫКИ ПРОГРАММИРОВАНИЯ ===
1) Java - основной язык для бэкенда
2) SQL - для работы с базой данных


=== РАБОТА С БАЗОЙ ДАННЫХ ===
1) JDBC (Java Database Connectivity) - API для работы с БД
   - Поддержка prepared statements для безопасности
   - Автоматическое управление соединениями
   - Обработка транзакций

2) "Soft delete" (мягкое удаление)
   - Поля delete_time и deleted_by для отслеживания удалений
   - Возможность восстановления удаленных записей
   - Фильтрация удаленных записей в запросах


=== АРХИТЕКТУРА ПРОЕКТА ===
1) Repository Pattern (паттерн репозиторий)
   - Абстракция доступа к данным
   - Единый интерфейс для всех сущностей
   - Разделение бизнес-логики и доступа к данным

2) BaseRepository - базовый класс для всех репозиториев
   - Общие методы для CRUD операций
   - Автоматическая нумерация позиций
   - Нормализация позиций без разрывов
   - Поддержка мягкого удаления и восстановления

3) Модели данных (Model)
   - Entity классы для представления сущностей
   - Поддержка аудита (create_time, update_time, created_by, updated_by)
   - Позиционирование для сортировки


=== УПРАВЛЕНИЕ ДАННЫМИ ===
1) Автоматическая нумерация позиций
   - Поле position для сортировки записей
   - Автоматическое назначение следующего номера
   - Перестановка позиций при обновлении

2) Нормализация позиций
   - Устранение разрывов в нумерации
   - Последовательная нумерация от 1
   - Автоматическое выполнение после save/update

3) Восстановление удаленных записей
   - Поиск записей с тем же названием
   - Автоматическое восстановление при сохранении
   - Установка новой позиции для восстановленной записи


=== ОБРАБОТКА ДАТ И ВРЕМЕНИ ===
1) DateTimeUtil - утилиты для работы с датами
   - Форматирование дат для SQLite
   - Парсинг дат из SQLite
   - Совместимость с различными форматами

2) LocalDateTime - современный API для работы с датами
   - Точность до наносекунд
   - Иммутабельность объектов
   - Безопасность потоков


=== БЕЗОПАСНОСТЬ ===
1) Prepared Statements
   - Защита от SQL-инъекций
   - Автоматическое экранирование параметров
   - Оптимизация выполнения запросов

2) Управление соединениями
   - Автоматическое закрытие ресурсов (try-with-resources)
   - Изоляция транзакций
   - Обработка исключений


=== СТРУКТУРА ПРОЕКТА ===
1) Модульная архитектура
   - Разделение на пакеты (model, repository, service, util)
   - Четкие границы ответственности
   - Легкость расширения и поддержки

2) Стандартизация
   - Единый порядок полей в таблицах
   - Консистентные имена методов
   - Унифицированная обработка ошибок


=== ПРОИЗВОДИТЕЛЬНОСТЬ ===
1) Оптимизация запросов
   - Индексы для быстрого поиска
   - Эффективные JOIN операции
   - Минимизация количества запросов

2) Управление памятью
   - Автоматическое освобождение ресурсов
   - Эффективная работа с большими наборами данных
   - Оптимизация использования JVM


=== РАСШИРЯЕМОСТЬ ===
1) Гибкая архитектура
   - Легкое добавление новых сущностей
   - Расширение функциональности репозиториев
   - Поддержка новых типов данных

2) Конфигурируемость
   - Настройка поведения через параметры
   - Поддержка различных режимов работы
   - Адаптация под различные требования




