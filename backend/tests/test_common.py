import os
import sqlite3
from typing import List, Optional

import jpype
import jpype.imports


class JPypeSetup:
    """–ö–ª–∞—Å—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è JPype –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º"""

    def __init__(self):
        # –ü—É—Ç—å –∫ JDK (–≥–¥–µ –ª–µ–∂–∏—Ç jvm.dll)
        self.JDK_PATH = r"C:\Users\Korenyk.A\Documents\Prodjects\jdk-17.0.12\bin"

        # –ü—É—Ç—å –∫ build, –≥–¥–µ –ª–µ–∂–∞—Ç —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã
        self.BUILD_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "build"))

        # –ü—É—Ç—å –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º (SQLite –¥—Ä–∞–π–≤–µ—Ä)
        self.LIB_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", "lib"))

        # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.DB_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "budget_master.db"))

        # Classpath —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º–∏
        self.CLASSPATH = (
            self.BUILD_PATH
            + os.pathsep
            + os.path.join(self.LIB_PATH, "sqlite-jdbc-3.45.1.0.jar")
            + os.pathsep
            + os.path.join(self.LIB_PATH, "slf4j-api-2.0.13.jar")
            + os.pathsep
            + os.path.join(self.LIB_PATH, "slf4j-simple-2.0.13.jar")
        )

        self.jvm_started = False
        self.java_classes = {}

    def check_prerequisites(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        print(f"Classpath: {self.CLASSPATH}")
        print(f"Database: {self.DB_PATH}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö JAR —Ñ–∞–π–ª–æ–≤
        required_jars = ["sqlite-jdbc-3.45.1.0.jar", "slf4j-api-2.0.13.jar", "slf4j-simple-2.0.13.jar"]

        for jar in required_jars:
            jar_path = os.path.join(self.LIB_PATH, jar)
            if not os.path.exists(jar_path):
                print(f"‚ùå JAR —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {jar_path}")
                return False

        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
        return True

    def create_database_if_not_exists(self) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        if os.path.exists(self.DB_PATH):
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {self.DB_PATH}")
            return True

        print(f"üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.DB_PATH}")
        print("üîß –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º JVM –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
            if not self.jvm_started:
                self.start_jvm()

            # –ü–æ–ª—É—á–∞–µ–º DatabaseUtil –∫–ª–∞—Å—Å
            DatabaseUtil = self.get_class("util.DatabaseUtil")

            # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            DatabaseUtil.createDatabaseIfNotExists(self.DB_PATH)

            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: {self.DB_PATH}")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

    def start_jvm(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç JVM –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã"""
        if self.jvm_started:
            return

        # –ó–∞–ø—É—Å–∫ JVM
        jpype.startJVM(
            jvmpath=os.path.join(self.JDK_PATH, "server", "jvm.dll"), classpath=self.CLASSPATH, convertStrings=True
        )

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º SQLite –¥—Ä–∞–π–≤–µ—Ä
            Class = jpype.JClass("java.lang.Class")
            Class.forName("org.sqlite.JDBC")
            print("‚úÖ SQLite –¥—Ä–∞–π–≤–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω")

            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
            self.java_classes = {
                'LocalDateTime': jpype.JClass("java.time.LocalDateTime"),
                'DateTimeUtil': jpype.JClass("util.DateTimeUtil"),
                'DatabaseUtil': jpype.JClass("util.DatabaseUtil"),
            }

            print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
            self.jvm_started = True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ JVM: {e}")
            raise

    def get_class(self, class_name: str):
        """–ü–æ–ª—É—á–∞–µ—Ç Java –∫–ª–∞—Å—Å –ø–æ –∏–º–µ–Ω–∏"""
        if not self.jvm_started:
            self.start_jvm()

        if class_name not in self.java_classes:
            self.java_classes[class_name] = jpype.JClass(class_name)

        return self.java_classes[class_name]

    def shutdown_jvm(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç JVM"""
        if jpype.isJVMStarted():
            jpype.shutdownJVM()
            self.jvm_started = False
            print("JVM –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")


class DatabaseManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self, db_path: str):
        self.db_path = db_path

    def execute_query(self, query: str, params: tuple = None) -> List[tuple]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()

            if params:
                cursor.execute(query, params)
            else:
                cursor.execute(query)

            results = cursor.fetchall()
            conn.close()
            return results

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return []

    def execute_update(self, query: str, params: tuple = None) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()

            if params:
                cursor.execute(query, params)
            else:
                cursor.execute(query)

            conn.commit()
            conn.close()
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return False

    def get_table_info(self, table_name: str) -> List[tuple]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã"""
        return self.execute_query(f"PRAGMA table_info({table_name})")

    def get_table_columns(self, table_name: str) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ã"""
        table_info = self.get_table_info(table_name)
        return [col[1] for col in table_info]

    def check_database_exists(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        return os.path.exists(self.db_path)

    def get_database_size(self) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–π—Ç–∞—Ö"""
        if os.path.exists(self.db_path):
            return os.path.getsize(self.db_path)
        return 0

    def get_database_info(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        info = {'exists': self.check_database_exists(), 'path': self.db_path, 'size_bytes': self.get_database_size()}

        if info['exists']:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
            tables = self.execute_query("SELECT name FROM sqlite_master WHERE type='table'")
            info['tables'] = [table[0] for table in tables]

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
            info['table_counts'] = {}
            for table in info['tables']:
                count_result = self.execute_query(f"SELECT COUNT(*) FROM {table}")
                if count_result:
                    info['table_counts'][table] = count_result[0][0]

        return info


class TestDataManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""

    def __init__(self, db_manager: DatabaseManager):
        self.db_manager = db_manager
        self.test_ids = {}  # {table_name: [id1, id2, ...]}

    def add_test_id(self, table_name: str, entity_id: int):
        """–î–æ–±–∞–≤–ª—è–µ—Ç ID —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏"""
        if table_name not in self.test_ids:
            self.test_ids[table_name] = []
        self.test_ids[table_name].append(entity_id)

    def cleanup_test_data(self):
        """–§–∏–∑–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        print("\n--- –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---")

        for table_name, ids in self.test_ids.items():
            if not ids:
                continue

            print(f"–£–¥–∞–ª—è–µ–º {len(ids)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {ids}")

            for entity_id in ids:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                result = self.db_manager.execute_query(f"SELECT * FROM {table_name} WHERE id = ?", (entity_id,))

                if result:
                    print(f"–§–∏–∑–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å: ID={entity_id}")
                    self.db_manager.execute_update(f"DELETE FROM {table_name} WHERE id = ?", (entity_id,))
                else:
                    print(f"–ó–∞–ø–∏—Å—å —Å ID={entity_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}")

        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö ID
        self.test_ids.clear()
        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    def reset_database_to_defaults(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º"""
        print("\n--- –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫ –¥–µ—Ñ–æ–ª—Ç–∞–º ---")

        try:
            # –ü–æ–ª—É—á–∞–µ–º DatabaseUtil –∫–ª–∞—Å—Å
            DatabaseUtil = jpype_setup.get_class("util.DatabaseUtil")

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            DatabaseUtil.restoreDefaults(jpype_setup.DB_PATH)

            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞ –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö
jpype_setup = JPypeSetup()
db_manager = DatabaseManager(jpype_setup.DB_PATH)
test_data_manager = TestDataManager(db_manager)


def setup_example():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    if not jpype_setup.check_prerequisites():
        return False

    try:
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not jpype_setup.create_database_if_not_exists():
            return False

        jpype_setup.start_jvm()

        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_info = db_manager.get_database_info()
        print(f"\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   –ü—É—Ç—å: {db_info['path']}")
        print(f"   –†–∞–∑–º–µ—Ä: {db_info['size_bytes']} –±–∞–π—Ç")
        print(f"   –¢–∞–±–ª–∏—Ü—ã: {', '.join(db_info.get('tables', []))}")

        if 'table_counts' in db_info:
            print(f"   –ó–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö:")
            for table, count in db_info['table_counts'].items():
                print(f"     {table}: {count}")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ: {e}")
        return False


def cleanup_example():
    """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤"""
    test_data_manager.cleanup_test_data()
    jpype_setup.shutdown_jvm()


def get_java_class(class_name: str):
    """–ü–æ–ª—É—á–∞–µ—Ç Java –∫–ª–∞—Å—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö"""
    return jpype_setup.get_class(class_name)


def create_test_entity(entity_class, **kwargs):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Å—É—â–Ω–æ—Å—Ç—å —Å –±–∞–∑–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏"""
    entity = entity_class()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
    entity.setCreatedBy("test_user")
    entity.setUpdatedBy("test_user")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã
    LocalDateTime = get_java_class("java.time.LocalDateTime")
    now = LocalDateTime.now()
    entity.setCreateTime(now)
    entity.setUpdateTime(now)
    entity.setDeleteTime(None)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
    for key, value in kwargs.items():
        method_name = f"set{key.capitalize()}"
        if hasattr(entity, method_name):
            getattr(entity, method_name)(value)

    return entity


def print_database_status():
    """–í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    db_info = db_manager.get_database_info()

    print(f"\nüìä –°—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    print(f"   –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {'‚úÖ' if db_info['exists'] else '‚ùå'}")
    print(f"   –ü—É—Ç—å: {db_info['path']}")

    if db_info['exists']:
        print(f"   –†–∞–∑–º–µ—Ä: {db_info['size_bytes']} –±–∞–π—Ç")
        print(f"   –¢–∞–±–ª–∏—Ü—ã: {', '.join(db_info.get('tables', []))}")

        if 'table_counts' in db_info:
            print(f"   –ó–∞–ø–∏—Å–µ–π:")
            for table, count in db_info['table_counts'].items():
                print(f"     {table}: {count}")
    else:
        print("   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
