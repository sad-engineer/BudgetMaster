#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import subprocess
import sys

import jpype
import jpype.imports


class LoaderSetup:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–≤"""

    def __init__(self):
        # –ü—É—Ç—å –∫ JDK
        self.JDK_PATH = r"C:\Users\Korenyk.A\Documents\Prodjects\jdk-17.0.12\bin"

        # –ü—É—Ç—å –∫ build
        self.BUILD_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "build"))

        # –ü—É—Ç—å –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º
        self.LIB_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", "lib"))

        # Classpath
        self.CLASSPATH = (
            self.BUILD_PATH
            + os.pathsep
            + os.path.join(self.LIB_PATH, "sqlite-jdbc-3.45.1.0.jar")
            + os.pathsep
            + os.path.join(self.LIB_PATH, "slf4j-api-2.0.13.jar")
            + os.pathsep
            + os.path.join(self.LIB_PATH, "slf4j-simple-2.0.13.jar")
        )

        self.jvm_started = False
        self.java_classes = {}

    def setup(self):
        """–ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º JAR —Ñ–∞–π–ª—ã
            required_jars = ["sqlite-jdbc-3.45.1.0.jar", "slf4j-api-2.0.13.jar", "slf4j-simple-2.0.13.jar"]
            for jar in required_jars:
                if not os.path.exists(os.path.join(self.LIB_PATH, jar)):
                    print(f"‚ùå JAR —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {jar}")
                    return False

            # –ó–∞–ø—É—Å–∫–∞–µ–º JVM
            if not self.jvm_started:
                jpype.startJVM(
                    jvmpath=os.path.join(self.JDK_PATH, "server", "jvm.dll"),
                    classpath=self.CLASSPATH,
                    convertStrings=True,
                )

                # –ó–∞–≥—Ä—É–∂–∞–µ–º SQLite –¥—Ä–∞–π–≤–µ—Ä
                Class = jpype.JClass("java.lang.Class")
                Class.forName("org.sqlite.JDBC")

                self.jvm_started = True

            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
            return False

    def get_class(self, class_name: str):
        """–ü–æ–ª—É—á–∞–µ—Ç Java –∫–ª–∞—Å—Å"""
        if not self.jvm_started:
            if not self.setup():
                return None

        if class_name not in self.java_classes:
            self.java_classes[class_name] = jpype.JClass(class_name)

        return self.java_classes[class_name]

    def compile_project(self):
        """–ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç"""
        try:
            project_root = os.path.dirname(os.path.dirname(__file__))
            compiler_script = os.path.join(project_root, "compiler.py")

            result = subprocess.run([sys.executable, compiler_script], capture_output=True, text=True, cwd=project_root)

            return result.returncode == 0
        except Exception:
            return False

    def shutdown(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç JVM"""
        if jpype.isJVMStarted():
            jpype.shutdownJVM()
            self.jvm_started = False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
loader_setup = LoaderSetup()


def setup_loader_environment():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–≤"""
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞...")

    # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç
    if not loader_setup.compile_project():
        print("‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏")
        return False

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º JVM
    if not loader_setup.setup():
        print("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ JVM")
        return False

    print("‚úÖ –ì–æ—Ç–æ–≤–æ")
    return True


def get_loader_class(class_name: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞"""
    return loader_setup.get_class(class_name)


def cleanup_loader_environment():
    """–û—á–∏—Å—Ç–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    loader_setup.shutdown()
