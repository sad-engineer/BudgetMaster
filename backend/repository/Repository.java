package repository;

import java.util.List;
import java.util.Optional;

/**
 * Интерфейс Repository для работы с данными
 * 
 * <p>Определяет базовый контракт для всех репозиториев в системе.
 * Содержит основные CRUD операции, которые должны быть реализованы
 * каждым конкретным репозиторием.
 * 
 * <p>Все методы работают с сущностями типа T и используют идентификаторы типа ID.
 * Репозитории обеспечивают абстракцию над слоем доступа к данным и скрывают
 * детали реализации работы с базой данных.
 * 
 * @param <T> тип сущности, с которой работает репозиторий
 * @param <ID> тип идентификатора сущности (обычно Integer или Long)
 * @author BudgetMaster
 * @version 1.0
 */
public interface Repository<T, ID> {
    
    /**
     * Получение всех сущностей
     * 
     * <p>Возвращает полный список всех сущностей данного типа из базы данных.
     * Результат не фильтруется по статусу удаления.
     * 
     * @return список всех сущностей (может быть пустым, но не null)
     */
    List<T> findAll();
    
    /**
     * Поиск сущности по идентификатору
     * 
     * <p>Выполняет поиск сущности по уникальному идентификатору.
     * Возвращает Optional, который содержит найденную сущность или пустой,
     * если сущность не найдена.
     * 
     * @param id уникальный идентификатор сущности (не null)
     * @return Optional с найденной сущностью, если найдена, иначе пустой Optional
     */
    Optional<T> findById(ID id);
    
    /**
     * Сохранение новой сущности
     * 
     * <p>Создает новую запись в базе данных для указанной сущности.
     * После успешного сохранения ID объекта обновляется сгенерированным значением.
     * 
     * @param entity объект сущности для сохранения (не null)
     * @return сохраненная сущность с установленным ID
     */
    T save(T entity);
    
    /**
     * Обновление существующей сущности
     * 
     * <p>Обновляет существующую запись в базе данных по ID сущности.
     * Объект entity должен содержать валидный ID существующей записи.
     * 
     * @param entity объект сущности с обновленными данными (не null, должен содержать валидный ID)
     * @return обновленная сущность
     */
    T update(T entity);
} 