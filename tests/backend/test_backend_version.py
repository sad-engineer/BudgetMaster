#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–∏ backend –ø–∞–∫–µ—Ç–∞
"""

import unittest

from test_common import JPypeSetup, get_java_class


class TestBackendVersion(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–∏ backend"""

    @classmethod
    def setUpClass(cls):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        print("üîç –ù–ê–°–¢–†–û–ô–ö–ê –¢–ï–°–¢–û–í –í–ï–†–°–ò–ò BACKEND")
        print("=" * 50)

        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä JPypeSetup
        cls.jpype_setup = JPypeSetup()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
        if not cls.jpype_setup.check_prerequisites():
            raise Exception("‚ùå –ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")

        # –ó–∞–ø—É—Å–∫–∞–µ–º JVM
        cls.jpype_setup.start_jvm()

        print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")

    @classmethod
    def tearDownClass(cls):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        print("üßπ –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–û–ì–û –û–ö–†–£–ñ–ï–ù–ò–Ø")
        cls.jpype_setup.shutdown_jvm()
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ")

    def test_01_backend_version_exists(self):
        """–¢–µ—Å—Ç 01: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞—Å—Å BackendVersion —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        print("\nüìã –¢–µ—Å—Ç 01: —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ BackendVersion")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å BackendVersion
            BackendVersion = get_java_class("com.sadengineer.budgetmaster.backend.BackendVersion")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞—Å—Å –Ω–µ None
            self.assertIsNotNone(BackendVersion, "–ö–ª–∞—Å—Å BackendVersion –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å")

            print("‚úÖ –ö–ª–∞—Å—Å BackendVersion –Ω–∞–π–¥–µ–Ω")

        except Exception as e:
            self.fail(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª–∞—Å—Å–∞ BackendVersion: {e}")

    def test_02_backend_version_constant_exists(self):
        """–¢–µ—Å—Ç 02: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ VERSION —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        print("\nüìã –¢–µ—Å—Ç 02: —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã VERSION")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å BackendVersion
            BackendVersion = get_java_class("com.sadengineer.budgetmaster.backend.BackendVersion")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ VERSION —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            version = BackendVersion.VERSION

            self.assertIsNotNone(version, "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ VERSION –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å")
            self.assertIsInstance(version, str, "VERSION –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")

            print(f"‚úÖ –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ VERSION –Ω–∞–π–¥–µ–Ω–∞: {version}")

        except Exception as e:
            self.fail(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã VERSION: {e}")

    def test_03_backend_version_format(self):
        """–¢–µ—Å—Ç 03: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏"""
        print("\nüìã –¢–µ—Å—Ç 03: —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é
            BackendVersion = get_java_class("com.sadengineer.budgetmaster.backend.BackendVersion")
            version = BackendVersion.VERSION

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.0.009)
            self.assertRegex(version, r'^\d+\.\d+\.\d+$', "–í–µ—Ä—Å–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É X.Y.Z")

            # –†–∞–∑–±–∏—Ä–∞–µ–º –≤–µ—Ä—Å–∏—é
            parts = version.split('.')
            self.assertEqual(len(parts), 3, "–í–µ—Ä—Å–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3 —á–∞—Å—Ç–∏")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —á–∞—Å—Ç–∏ - —á–∏—Å–ª–∞
            for part in parts:
                self.assertTrue(part.isdigit(), f"–ß–∞—Å—Ç—å –≤–µ—Ä—Å–∏–∏ '{part}' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")

            print(f"‚úÖ –§–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: {version}")

        except Exception as e:
            self.fail(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–µ—Ä—Å–∏–∏: {e}")

    def test_04_backend_version_not_empty(self):
        """–¢–µ—Å—Ç 04: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Ä—Å–∏—è –Ω–µ –ø—É—Å—Ç–∞—è"""
        print("\nüìã –¢–µ—Å—Ç 04: –≤–µ—Ä—Å–∏—è –Ω–µ –ø—É—Å—Ç–∞—è")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é
            BackendVersion = get_java_class("com.sadengineer.budgetmaster.backend.BackendVersion")
            version = BackendVersion.VERSION

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Ä—Å–∏—è –Ω–µ –ø—É—Å—Ç–∞—è
            self.assertIsNotNone(version, "–í–µ—Ä—Å–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å None")
            self.assertNotEqual(version.strip(), "", "–í–µ—Ä—Å–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π")
            self.assertNotEqual(version, "unknown", "–í–µ—Ä—Å–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 'unknown'")

            print(f"‚úÖ –í–µ—Ä—Å–∏—è –Ω–µ –ø—É—Å—Ç–∞—è: {version}")

        except Exception as e:
            self.fail(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–µ—Ä—Å–∏–∏: {e}")

    def test_05_backend_version_from_file(self):
        """–¢–µ—Å—Ç 05: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Ä—Å–∏—è —á–∏—Ç–∞–µ—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞"""
        print("\nüìã –¢–µ—Å—Ç 05: —á—Ç–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ JAR
            BackendVersion = get_java_class("com.sadengineer.budgetmaster.backend.BackendVersion")
            version = BackendVersion.VERSION

            # –ß–∏—Ç–∞–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –≤–µ—Ä—Å–∏—é –∏–∑ —Ñ–∞–π–ª–∞ backend/version.txt
            import os

            version_file_path = os.path.join(
                os.path.dirname(__file__),
                "..",
                "..",
                "backend",
                "com",
                "sadengineer",
                "budgetmaster",
                "backend",
                "VERSION",
            )

            with open(version_file_path, 'r', encoding='utf-8') as f:
                expected_version = f.read().strip()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Ä—Å–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π
            self.assertEqual(
                version, expected_version, f"–í–µ—Ä—Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å '{expected_version}', –ø–æ–ª—É—á–µ–Ω–æ '{version}'"
            )

            print(f"‚úÖ –í–µ—Ä—Å–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª—É: {version}")

        except Exception as e:
            self.fail(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–µ—Ä—Å–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞: {e}")

    def test_06_backend_version_main_method(self):
        """–¢–µ—Å—Ç 06: –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ main –∫–ª–∞—Å—Å–∞ BackendVersion"""
        print("\nüìã –¢–µ—Å—Ç 06: –º–µ—Ç–æ–¥ main –∫–ª–∞—Å—Å–∞ BackendVersion")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å BackendVersion
            BackendVersion = get_java_class("com.sadengineer.budgetmaster.backend.BackendVersion")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ main —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            self.assertTrue(hasattr(BackendVersion, 'main'), "–ö–ª–∞—Å—Å BackendVersion –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –º–µ—Ç–æ–¥ main")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ main —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π
            self.assertTrue(BackendVersion.main.__name__ == 'main', "–ú–µ—Ç–æ–¥ main –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º")

            print("‚úÖ –ú–µ—Ç–æ–¥ main –∫–ª–∞—Å—Å–∞ BackendVersion –Ω–∞–π–¥–µ–Ω")

        except Exception as e:
            self.fail(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–µ—Ç–æ–¥–∞ main: {e}")

    def test_07_backend_version_in_jar(self):
        """–¢–µ—Å—Ç 07: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Ä—Å–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ JAR —Ñ–∞–π–ª–µ"""
        print("\nüìã –¢–µ—Å—Ç 07: –≤–µ—Ä—Å–∏—è –≤ JAR —Ñ–∞–π–ª–µ")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é
            BackendVersion = get_java_class("com.sadengineer.budgetmaster.backend.BackendVersion")
            version = BackendVersion.VERSION

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Ä—Å–∏—è –Ω–µ –ø—É—Å—Ç–∞—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è
            self.assertIsNotNone(version)
            self.assertNotEqual(version.strip(), "")
            self.assertNotEqual(version, "unknown")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
            self.assertRegex(version, r'^\d+\.\d+\.\d+$')

            print(f"‚úÖ –í–µ—Ä—Å–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ JAR: {version}")

        except Exception as e:
            self.fail(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–µ—Ä—Å–∏–∏ –≤ JAR: {e}")


def run_backend_version_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –≤–µ—Ä—Å–∏–∏ backend"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –í–ï–†–°–ò–ò BACKEND")
    print("=" * 50)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä
    loader = unittest.TestLoader()
    suite = loader.loadTestsFromTestCase(TestBackendVersion)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)

    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:")
    print(f"   –¢–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {result.testsRun}")
    print(f"   –£—Å–ø–µ—à–Ω–æ: {result.testsRun - len(result.failures) - len(result.errors)}")
    print(f"   –û—à–∏–±–æ–∫: {len(result.errors)}")
    print(f"   –ü—Ä–æ–≤–∞–ª–æ–≤: {len(result.failures)}")

    if result.wasSuccessful():
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")

    return result.wasSuccessful()


if __name__ == '__main__':
    run_backend_version_tests()
