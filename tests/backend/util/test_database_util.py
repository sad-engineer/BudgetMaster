import os
import sys
import tempfile
import unittest

from tests.backend.test_common import (
    get_java_class,
    setup_test_environment,
)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(__file__)))


class TestDatabaseUtil(unittest.TestCase):
    """–Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã –¥–ª—è DatabaseUtil"""

    @classmethod
    def setUpClass(cls):
        result = setup_test_environment()
        if result is None:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ setup_test_environment
        cls.jpype_setup, cls.db_manager, cls.test_data_manager = result

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Java –∫–ª–∞—Å—Å—ã
        cls.DatabaseUtil = get_java_class("com.sadengineer.budgetmaster.backend.util.DatabaseUtil")
        cls.PlatformUtil = get_java_class("com.sadengineer.budgetmaster.backend.util.PlatformUtil")
        cls.SQLException = get_java_class("java.sql.SQLException")
        cls.SQLiteException = get_java_class("org.sqlite.SQLiteException")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DatabaseProvider –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        cls.PlatformUtil.initializeDatabaseProvider(None)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º DB_PATH –∏–∑ test_common.py
        cls.temp_db_path = cls.db_manager.db_path
        print(f"üîç –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø–æ –ø—É—Ç–∏: {cls.temp_db_path}")
        print(f"üîç –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(os.path.dirname(cls.temp_db_path))}")

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        db_dir = os.path.dirname(cls.temp_db_path)
        if not os.path.exists(db_dir):
            os.makedirs(db_dir)
            print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {db_dir}")
        else:
            print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {db_dir}")

    @classmethod
    def tearDownClass(cls):
        try:
            # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
            if hasattr(cls, 'test_data_manager'):
                cls.test_data_manager.cleanup_test_data()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
        finally:
            pass

    def test_01_create_database_if_not_exists(self):
        """–¢–µ—Å—Ç 01: –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""

        if os.path.exists(self.temp_db_path):
            os.remove(self.temp_db_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self.assertFalse(os.path.exists(self.temp_db_path))

        # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É
        self.DatabaseUtil.createDatabaseIfNotExists(self.temp_db_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
        self.assertTrue(os.path.exists(self.temp_db_path))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0)
        file_size = os.path.getsize(self.temp_db_path)
        self.assertGreater(file_size, 0)

    def test_02_create_database_tables_structure(self):
        """–¢–µ—Å—Ç 02: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü"""
        self.DatabaseUtil.createDatabaseIfNotExists(self.temp_db_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
        currencies_count = self.DatabaseUtil.getTableRecordCount(self.temp_db_path, "currencies")
        categories_count = self.DatabaseUtil.getTableRecordCount(self.temp_db_path, "categories")
        accounts_count = self.DatabaseUtil.getTableRecordCount(self.temp_db_path, "accounts")
        budgets_count = self.DatabaseUtil.getTableRecordCount(self.temp_db_path, "budgets")
        operations_count = self.DatabaseUtil.getTableRecordCount(self.temp_db_path, "operations")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã
        self.assertEqual(currencies_count, 3)
        self.assertEqual(categories_count, 17)
        self.assertEqual(accounts_count, 5)
        self.assertEqual(budgets_count, 0)
        self.assertEqual(operations_count, 0)

    def test_03_get_table_record_count(self):
        """–¢–µ—Å—Ç 03: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        self.DatabaseUtil.createDatabaseIfNotExists(self.temp_db_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ –≤–∞–ª—é—Ç
        count = self.DatabaseUtil.getTableRecordCount(self.temp_db_path, "currencies")
        self.assertGreater(count, 0)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –ø—É—Å—Ç–æ–π —Ç–∞–±–ª–∏—Ü–µ –æ–ø–µ—Ä–∞—Ü–∏–π
        count = self.DatabaseUtil.getTableRecordCount(self.temp_db_path, "operations")
        self.assertEqual(count, 0)

    def test_04_get_total_record_count(self):
        """–¢–µ—Å—Ç 04: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π"""
        self.DatabaseUtil.createDatabaseIfNotExists(self.temp_db_path)

        total_count = self.DatabaseUtil.getTotalRecordCount(self.temp_db_path)
        self.assertGreater(total_count, 0)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–≤–Ω–æ —Å—É–º–º–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        currencies_count = self.DatabaseUtil.getTableRecordCount(self.temp_db_path, "currencies")
        categories_count = self.DatabaseUtil.getTableRecordCount(self.temp_db_path, "categories")
        accounts_count = self.DatabaseUtil.getTableRecordCount(self.temp_db_path, "accounts")
        budgets_count = self.DatabaseUtil.getTableRecordCount(self.temp_db_path, "budgets")
        operations_count = self.DatabaseUtil.getTableRecordCount(self.temp_db_path, "operations")

        expected_total = currencies_count + categories_count + accounts_count + budgets_count + operations_count
        self.assertEqual(total_count, expected_total)

    def test_05_clear_table(self):
        """–¢–µ—Å—Ç 05: –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã"""
        self.DatabaseUtil.createDatabaseIfNotExists(self.temp_db_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –≤–∞–ª—é—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ
        initial_count = self.DatabaseUtil.getTableRecordCount(self.temp_db_path, "currencies")
        self.assertGreater(initial_count, 0)

        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.DatabaseUtil.clearTable(self.temp_db_path, "currencies")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞
        final_count = self.DatabaseUtil.getTableRecordCount(self.temp_db_path, "currencies")
        self.assertEqual(final_count, 0)

    def test_06_clear_all_data(self):
        """–¢–µ—Å—Ç 06: –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.DatabaseUtil.createDatabaseIfNotExists(self.temp_db_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        initial_total = self.DatabaseUtil.getTotalRecordCount(self.temp_db_path)
        self.assertGreater(initial_total, 0)

        # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        self.DatabaseUtil.clearAllData(self.temp_db_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ø—É—Å—Ç—ã
        final_total = self.DatabaseUtil.getTotalRecordCount(self.temp_db_path)
        self.assertEqual(final_total, 0)

    def test_07_restore_default_currencies(self):
        """–¢–µ—Å—Ç 07: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç"""
        self.DatabaseUtil.createDatabaseIfNotExists(self.temp_db_path)

        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤–∞–ª—é—Ç
        self.DatabaseUtil.clearTable(self.temp_db_path, "currencies")
        self.assertEqual(self.DatabaseUtil.getTableRecordCount(self.temp_db_path, "currencies"), 0)

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –≤–∞–ª—é—Ç—ã
        self.DatabaseUtil.restoreDefaultCurrencies(self.temp_db_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–ª—é—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        currencies_count = self.DatabaseUtil.getTableRecordCount(self.temp_db_path, "currencies")
        self.assertEqual(currencies_count, 3)

    def test_08_restore_default_categories(self):
        """–¢–µ—Å—Ç 08: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        self.DatabaseUtil.createDatabaseIfNotExists(self.temp_db_path)

        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        self.DatabaseUtil.clearTable(self.temp_db_path, "categories")
        self.assertEqual(self.DatabaseUtil.getTableRecordCount(self.temp_db_path, "categories"), 0)

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        self.DatabaseUtil.restoreDefaultCategories(self.temp_db_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        categories_count = self.DatabaseUtil.getTableRecordCount(self.temp_db_path, "categories")
        self.assertEqual(categories_count, 17)

    def test_09_restore_defaults(self):
        """–¢–µ—Å—Ç 09: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
        self.DatabaseUtil.createDatabaseIfNotExists(self.temp_db_path)

        # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        self.DatabaseUtil.clearAllData(self.temp_db_path)
        self.assertEqual(self.DatabaseUtil.getTotalRecordCount(self.temp_db_path), 0)

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        self.DatabaseUtil.restoreDefaults(self.temp_db_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        total_count = self.DatabaseUtil.getTotalRecordCount(self.temp_db_path)
        self.assertGreater(total_count, 0)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        currencies_count = self.DatabaseUtil.getTableRecordCount(self.temp_db_path, "currencies")
        categories_count = self.DatabaseUtil.getTableRecordCount(self.temp_db_path, "categories")
        accounts_count = self.DatabaseUtil.getTableRecordCount(self.temp_db_path, "accounts")

        self.assertGreater(currencies_count, 0)
        self.assertGreater(categories_count, 0)
        self.assertGreater(accounts_count, 0)

    def test_10_clear_table_nonexistent(self):
        """–¢–µ—Å—Ç 10: –û—á–∏—Å—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã"""
        self.DatabaseUtil.createDatabaseIfNotExists(self.temp_db_path)

        # –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É –¥–æ–ª–∂–Ω–∞ –≤—ã–∑–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        with self.assertRaises(Exception) as context:
            self.DatabaseUtil.clearTable(self.temp_db_path, "nonexistent_table")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.assertIn("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL", str(context.exception))
        self.assertIn("DELETE FROM nonexistent_table", str(context.exception))

    def test_11_get_table_record_count_nonexistent(self):
        """–¢–µ—Å—Ç 11: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã"""
        self.DatabaseUtil.createDatabaseIfNotExists(self.temp_db_path)

        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã –¥–æ–ª–∂–Ω–∞ –≤—ã–∑–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        with self.assertRaises(Exception) as context:
            self.DatabaseUtil.getTableRecordCount(self.temp_db_path, "nonexistent_table")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.assertIn("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL", str(context.exception))
        self.assertIn("SELECT COUNT(*) FROM nonexistent_table", str(context.exception))

    def test_12_database_encoding_utf8(self):
        """–¢–µ—Å—Ç 12: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ UTF-8 –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.DatabaseUtil.createDatabaseIfNotExists(self.temp_db_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–∑–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        self.assertTrue(os.path.exists(self.temp_db_path))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ SQLite
        import sqlite3
        conn = sqlite3.connect(self.temp_db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç UTF-8
        cursor.execute("PRAGMA encoding")
        encoding = cursor.fetchone()[0]
        self.assertEqual(encoding, "UTF-8")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç
        test_text = "–¢–µ—Å—Ç —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤: ‚ÇΩ‚Ç¨$¬•"
        cursor.execute("CREATE TABLE IF NOT EXISTS encoding_test (id INTEGER PRIMARY KEY, text TEXT)")
        cursor.execute("INSERT INTO encoding_test (text) VALUES (?)", (test_text,))
        conn.commit()
        
        cursor.execute("SELECT text FROM encoding_test WHERE id = 1")
        result = cursor.fetchone()
        self.assertEqual(result[0], test_text)
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
        cursor.execute("DROP TABLE encoding_test")
        conn.close()

    def test_13_multiple_database_creation(self):
        """–¢–µ—Å—Ç 13: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        # –ü–µ—Ä–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
        self.DatabaseUtil.createDatabaseIfNotExists(self.temp_db_path)
        first_size = os.path.getsize(self.temp_db_path)

        # –í—Ç–æ—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ (–Ω–µ –¥–æ–ª–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–π–ª)
        self.DatabaseUtil.createDatabaseIfNotExists(self.temp_db_path)
        second_size = os.path.getsize(self.temp_db_path)

        # –†–∞–∑–º–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏
        self.assertEqual(first_size, second_size)

    def test_14_clear_and_restore_cycle(self):
        """–¢–µ—Å—Ç 14: –¶–∏–∫–ª –æ—á–∏—Å—Ç–∫–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        self.DatabaseUtil.createDatabaseIfNotExists(self.temp_db_path)

        # –ü–µ—Ä–≤–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        initial_count = self.DatabaseUtil.getTotalRecordCount(self.temp_db_path)
        self.assertGreater(initial_count, 0)

        # –û—á–∏—Å—Ç–∫–∞
        self.DatabaseUtil.clearAllData(self.temp_db_path)
        self.assertEqual(self.DatabaseUtil.getTotalRecordCount(self.temp_db_path), 0)

        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        self.DatabaseUtil.restoreDefaults(self.temp_db_path)
        restored_count = self.DatabaseUtil.getTotalRecordCount(self.temp_db_path)
        self.assertGreater(restored_count, 0)

        # –í—Ç–æ—Ä–æ–π —Ü–∏–∫–ª
        self.DatabaseUtil.clearAllData(self.temp_db_path)
        self.DatabaseUtil.restoreDefaults(self.temp_db_path)
        second_restored_count = self.DatabaseUtil.getTotalRecordCount(self.temp_db_path)
        self.assertEqual(restored_count, second_restored_count)

    def test_15_default_currencies_content(self):
        """–¢–µ—Å—Ç 15: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç"""
        self.DatabaseUtil.createDatabaseIfNotExists(self.temp_db_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç
        currencies_count = self.DatabaseUtil.getTableRecordCount(self.temp_db_path, "currencies")
        print(f"üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç –≤ –±–∞–∑–µ: {currencies_count}")
        self.assertEqual(currencies_count, 3)  # –†—É–±–ª—å, –î–æ–ª–ª–∞—Ä, –ï–≤—Ä–æ

    def test_16_default_categories_structure(self):
        """–¢–µ—Å—Ç 16: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        self.DatabaseUtil.createDatabaseIfNotExists(self.temp_db_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories_count = self.DatabaseUtil.getTableRecordCount(self.temp_db_path, "categories")
        self.assertGreater(categories_count, 10)  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–Ω–æ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π

    def test_17_default_accounts_content(self):
        """–¢–µ—Å—Ç 17: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö —Å—á–µ—Ç–æ–≤"""
        self.DatabaseUtil.createDatabaseIfNotExists(self.temp_db_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö —Å—á–µ—Ç–æ–≤
        accounts_count = self.DatabaseUtil.getTableRecordCount(self.temp_db_path, "accounts")
        print(f"üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—á–µ—Ç–æ–≤ –≤ –±–∞–∑–µ: {accounts_count}")
        self.assertEqual(
            accounts_count, 5
        )  # 5 –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö —Å—á–µ—Ç–æ–≤: –ù–∞–ª–∏—á–Ω—ã–µ, –ó–∞—Ä–ø–ª–∞—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞, –°–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç, –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞, –ö–∞—Ä—Ç–∞ —Ä–∞—Å—Å—Ä–æ—á–∫–∏

    def test_18_database_file_permissions(self):
        """–¢–µ—Å—Ç 18: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.DatabaseUtil.createDatabaseIfNotExists(self.temp_db_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏
        self.assertTrue(os.access(self.temp_db_path, os.R_OK))
        self.assertTrue(os.access(self.temp_db_path, os.W_OK))

    def test_19_foreign_keys_enabled(self):
        """–¢–µ—Å—Ç 19: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π"""
        self.DatabaseUtil.createDatabaseIfNotExists(self.temp_db_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–∑–∞ —Å–æ–∑–¥–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        # (–≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        total_count = self.DatabaseUtil.getTotalRecordCount(self.temp_db_path)
        self.assertGreater(total_count, 0)


if __name__ == '__main__':
    unittest.main()
