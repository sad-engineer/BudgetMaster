import os
import sys
import unittest

from tests.backend.test_common import (
    cleanup_example,
    get_java_class,
    setup_example,
)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(__file__)))


class TestAccountService(unittest.TestCase):
    """–Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã –¥–ª—è AccountService"""

    @classmethod
    def setUpClass(cls):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ —Ç–µ—Å—Ç–∞–º–∏"""
        result = setup_example()
        if result is None:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ setup_example
        cls.jpype_setup, cls.db_manager, cls.test_data_manager = result

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Java –∫–ª–∞—Å—Å—ã
        cls.AccountService = get_java_class("com.sadengineer.budgetmaster.backend.service.AccountService")
        cls.AccountRepository = get_java_class("com.sadengineer.budgetmaster.backend.repository.AccountRepository")
        cls.Account = get_java_class("com.sadengineer.budgetmaster.backend.model.Account")
        cls.LocalDateTime = get_java_class("java.time.LocalDateTime")
        cls.Integer = get_java_class("java.lang.Integer")
        cls.PlatformUtil = get_java_class("com.sadengineer.budgetmaster.backend.util.PlatformUtil")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DatabaseProvider –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        cls.PlatformUtil.initializeDatabaseProvider(None)

        # –°–ø–∏—Å–æ–∫ ID —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        cls.test_account_ids = []

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º DB_PATH –∏–∑ test_common.py
        cls.test_db_path = cls.db_manager.db_path

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
        cls.DatabaseUtil = get_java_class("com.sadengineer.budgetmaster.backend.util.DatabaseUtil")
        cls.DatabaseUtil.createDatabaseIfNotExists(cls.test_db_path)
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {cls.test_db_path}")

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏ —Å–µ—Ä–≤–∏—Å
        cls.repository = cls.AccountRepository(cls.test_db_path)
        cls.service = cls.AccountService(cls.repository, "test_user")

    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        self.DatabaseUtil.createDatabaseIfNotExists(self.test_db_path)

        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è test_06
        if hasattr(self, '_testMethodName') and self._testMethodName == 'test_06_get_account_by_id':
            print(f"üîß setUp: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {self.test_db_path}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—á–µ—Ç–æ–≤ –ø–æ—Å–ª–µ createDatabaseIfNotExists
            account_count = self.DatabaseUtil.getTableRecordCount(self.test_db_path, "accounts")
            print(f"üîß setUp: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—á–µ—Ç–æ–≤ –ø–æ—Å–ª–µ createDatabaseIfNotExists: {account_count}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç
            currency_count = self.DatabaseUtil.getTableRecordCount(self.test_db_path, "currencies")
            print(f"üîß setUp: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç –ø–æ—Å–ª–µ createDatabaseIfNotExists: {currency_count}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            category_count = self.DatabaseUtil.getTableRecordCount(self.test_db_path, "categories")
            print(f"üîß setUp: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ—Å–ª–µ createDatabaseIfNotExists: {category_count}")

            # –ï—Å–ª–∏ —Å—á–µ—Ç–æ–≤ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if account_count == 0:
                print(f"üîß setUp: –°—á–µ—Ç–æ–≤ –Ω–µ—Ç, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                self.DatabaseUtil.restoreDefaults(self.test_db_path)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                account_count_after = self.DatabaseUtil.getTableRecordCount(self.test_db_path, "accounts")
                print(f"üîß setUp: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—á–µ—Ç–æ–≤ –ø–æ—Å–ª–µ restoreDefaults: {account_count_after}")

    @classmethod
    def tearDownClass(cls):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            if hasattr(cls, 'repository') and cls.repository is not None:
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
                    cls.repository = None
                    print("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∑–∞–∫—Ä—ã—Ç")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {e}")

            # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_manager = cls.db_manager

            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ ID
            deleted_count = 0
            for account_id in cls.test_account_ids:
                try:
                    success = db_manager.execute_update("DELETE FROM accounts WHERE id = ?", (account_id,))
                    if success:
                        deleted_count += 1
                    else:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—á–µ—Ç–∞ {account_id}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—á–µ—Ç–∞ {account_id}: {e}")

            if deleted_count > 0:
                print(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

            cleanup_example()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
        finally:
            # –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º JVM –∑–¥–µ—Å—å - –ø—É—Å—Ç—å —ç—Ç–æ –¥–µ–ª–∞–µ—Ç atexit
            pass

    def test_01_constructor_with_repository(self):
        """–¢–µ—Å—Ç 01: –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"""
        # Act
        service = self.AccountService(self.repository, "test_user")

        # Assert
        self.assertIsNotNone(service)

    def test_03_get_account_by_title(self):
        """–¢–µ—Å—Ç 03: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ (–Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ) —Å—á–µ—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        title = "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç"
        position = self.repository.getMaxPosition() + 1

        account = self.service.get(title, 0, 1, 1, 0)
        self.test_account_ids.append(account.getId())

        self.assertIsNotNone(account)
        self.assertEqual(account.getTitle(), title)
        self.assertEqual(account.getPosition(), position)
        self.assertEqual(account.getCreatedBy(), "test_user")
        self.assertIsNone(account.getUpdatedBy())
        self.assertIsNone(account.getDeletedBy())
        self.assertIsNotNone(account.getCreateTime())
        self.assertIsNone(account.getUpdateTime())
        self.assertIsNone(account.getDeleteTime())

    def test_04_get_existing_account_by_title(self):
        """–¢–µ—Å—Ç 04: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å—á–µ—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        title = "–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—á–µ—Ç"

        account_new = self.service.get(title, 0, 1, 1, 0)
        self.test_account_ids.append(account_new.getId())

        # –°—á–µ—Ç —Å–æ–∑–¥–∞–Ω, –µ–≥–æ –ø–æ–∑–∏—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞–∏–±–æ–ª—å—à–∞—è –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
        position = self.repository.getMaxPosition()
        account = self.service.get(title)
        self.test_account_ids.append(account.getId())

        self.assertIsNotNone(account)
        self.assertEqual(account.getTitle(), title)
        self.assertEqual(account.getPosition(), position)
        self.assertEqual(account.getCreatedBy(), "test_user")
        self.assertIsNone(account.getUpdatedBy())
        self.assertIsNone(account.getDeletedBy())
        self.assertIsNotNone(account.getCreateTime())
        self.assertIsNone(account.getUpdateTime())
        self.assertIsNone(account.getDeleteTime())

    def test_05_get_deleted_account_by_title(self):
        """–¢–µ—Å—Ç 05: –ü–æ–ª—É—á–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å—á–µ—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        title = "–£–¥–∞–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç"

        account_new = self.service.get(title, 0, 1, 1, 0)
        self.test_account_ids.append(account_new.getId())
        self.repository.deleteByTitle(title, "test_user")

        # –°—á–µ—Ç –Ω–µ —É–¥–∞–ª–µ–Ω —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã, –µ–≥–æ –ø–æ–∑–∏—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞–∏–±–æ–ª—å—à–∞—è –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
        position = self.repository.getMaxPosition()
        account = self.service.get(title)
        self.test_account_ids.append(account.getId())

        self.assertIsNotNone(account)
        self.assertEqual(account.getTitle(), title)
        self.assertEqual(account.getPosition(), position)
        self.assertEqual(account.getCreatedBy(), "test_user")
        self.assertEqual(account.getUpdatedBy(), "test_user")
        self.assertIsNone(account.getDeletedBy())
        self.assertIsNotNone(account.getCreateTime())
        self.assertIsNotNone(account.getUpdateTime())
        self.assertIsNone(account.getDeleteTime())
        self.assertNotEqual(account.getCreateTime(), account.getUpdateTime())

    def test_06_get_account_by_id(self):
        """–¢–µ—Å—Ç 06: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –ø–æ ID"""
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—á–µ—Ç —Å ID 1")
        print(f"üîç –ü—É—Ç—å –∫ –ë–î: {self.test_db_path}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ
        all_accounts = self.service.getAll()
        print(f"üîç –í—Å–µ–≥–æ —Å—á–µ—Ç–æ–≤ –≤ –ë–î: {len(all_accounts)}")
        for acc in all_accounts:
            print(f"üîç –°—á–µ—Ç ID={acc.getId()}, Title='{acc.getTitle()}', CreatedBy='{acc.getCreatedBy()}'")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        all_accounts_repo = self.repository.findAll()
        print(f"üîç –í—Å–µ–≥–æ —Å—á–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {all_accounts_repo.size()}")
        for acc in all_accounts_repo:
            print(f"üîç –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å—á–µ—Ç ID={acc.getId()}, Title='{acc.getTitle()}', CreatedBy='{acc.getCreatedBy()}'")

        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—á–µ—Ç –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        found_direct = self.repository.findById(self.Integer(1))
        print(f"üîç –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {found_direct.isPresent()}")
        if found_direct.isPresent():
            acc = found_direct.get()
            print(f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–π —Å—á–µ—Ç: ID={acc.getId()}, Title='{acc.getTitle()}'")

        # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        account = self.service.get(self.Integer(1))
        print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å: {account is not None}")

        self.assertIsNotNone(account)
        self.assertEqual(account.getId(), 1)
        self.assertEqual(account.getTitle(), "–ù–∞–ª–∏—á–Ω—ã–µ")
        self.assertEqual(account.getCreatedBy(), "initializer")
        self.assertIsNone(account.getDeletedBy())
        self.assertIsNotNone(account.getCreateTime())
        self.assertIsNone(account.getDeleteTime())

    def test_07_get_account_by_id_not_found(self):
        """–¢–µ—Å—Ç 07: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É ID"""
        account = self.service.get(self.Integer(999999))
        self.assertIsNone(account)

    def test_08_create_account_with_special_title(self):
        """–¢–µ—Å—Ç 08: –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ —Å –Ω–µ–æ–±—ã—á–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º"""
        account = self.service.get("12123", 0, 1, 1, 0)
        self.test_account_ids.append(account.getId())
        self.assertEqual(account.getTitle(), "12123")

        account2 = self.service.get("–°—á–µ—Ç —Å —Ü–∏—Ñ—Ä–∞–º–∏ 123", 0, 1, 1, 0)
        self.test_account_ids.append(account2.getId())
        self.assertEqual(account2.getTitle(), "–°—á–µ—Ç —Å —Ü–∏—Ñ—Ä–∞–º–∏ 123")

    def test_09_delete_account_by_id(self):
        """–¢–µ—Å—Ç 09: –£–¥–∞–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –ø–æ ID"""
        account = self.service.get("–°—á–µ—Ç 4", 0, 1, 1, 0)
        self.test_account_ids.append(account.getId())
        result = self.service.delete(account.getId())
        self.assertTrue(result)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—á–µ—Ç –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É–¥–∞–ª—ë–Ω–Ω—ã–π
        found = self.repository.findById(account.getId())
        self.assertTrue(found.isPresent())
        self.assertIsNotNone(found.get().getDeleteTime())
        self.assertEqual(found.get().getDeletedBy(), "test_user")

    def test_10_delete_account_by_title(self):
        """–¢–µ—Å—Ç 10: –£–¥–∞–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        title = "–°—á–µ—Ç 5"
        account = self.service.get(title, 0, 1, 1, 0)
        self.test_account_ids.append(account.getId())
        result = self.service.delete(title)
        self.assertTrue(result)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—á–µ—Ç —É–¥–∞–ª–µ–Ω
        found = self.repository.findByTitle(title).get()
        self.assertIsNotNone(found)
        self.assertIsNotNone(found.getDeleteTime())
        self.assertEqual(found.getDeletedBy(), "test_user")

    def test_11_is_account_deleted(self):
        """–¢–µ—Å—Ç 11: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞"""
        account = self.service.get("–°—á–µ—Ç 6", 0, 1, 1, 0)
        self.test_account_ids.append(account.getId())
        self.repository.deleteById(account.getId(), "test_user")
        deleted = self.repository.findById(account.getId()).get()
        self.assertTrue(self.service.isAccountDeleted(deleted))

    def test_12_change_position(self):
        """–¢–µ—Å—Ç 12: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å—á–µ—Ç–∞"""
        position = self.repository.getMaxPosition()
        a1 = self.service.get("–°—á–µ—Ç —Ö1", 0, 1, 1, 0)
        a2 = self.service.get("–°—á–µ—Ç —Ö2", 0, 1, 1, 0)
        a3 = self.service.get("–°—á–µ—Ç —Ö3", 0, 1, 1, 0)
        self.test_account_ids.extend([a1.getId(), a2.getId(), a3.getId()])
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º a1 –Ω–∞ –ø–æ–∑–∏—Ü–∏—é 3
        result = self.service.changePosition(a1, position + 3)
        self.assertEqual(result.getPosition(), position + 3)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥—Ä—É–≥–∏–µ —Å—á–µ—Ç–∞ —Å–¥–≤–∏–Ω—É–ª–∏—Å—å
        updated_a2 = self.repository.findById(a2.getId()).get()
        updated_a3 = self.repository.findById(a3.getId()).get()
        self.assertEqual(updated_a2.getPosition(), position + 1)
        self.assertEqual(updated_a3.getPosition(), position + 2)

    def test_13_change_position_up(self):
        """–¢–µ—Å—Ç 13: –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –≤–≤–µ—Ä—Ö"""
        position = self.repository.getMaxPosition()
        a1 = self.service.get("–°—á–µ—Ç A", 0, 1, 1, 0)
        a2 = self.service.get("–°—á–µ—Ç B", 0, 1, 1, 0)
        a3 = self.service.get("–°—á–µ—Ç C", 0, 1, 1, 0)
        self.test_account_ids.extend([a1.getId(), a2.getId(), a3.getId()])
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º a3 –Ω–∞ –ø–æ–∑–∏—Ü–∏—é 1
        result = self.service.changePosition(a3, position + 1)
        self.assertEqual(result.getPosition(), position + 1)
        updated_a1 = self.repository.findById(a1.getId()).get()
        updated_a2 = self.repository.findById(a2.getId()).get()
        self.assertEqual(updated_a1.getPosition(), position + 2)
        self.assertEqual(updated_a2.getPosition(), position + 3)

    def test_14_get_all_accounts(self):
        """–¢–µ—Å—Ç 14: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤"""
        a1 = self.service.get("–°—á–µ—Ç 111", 0, 1, 1, 0)
        a2 = self.service.get("–°—á–µ—Ç 211", 0, 1, 1, 0)
        self.test_account_ids.append(a1.getId())
        self.test_account_ids.append(a2.getId())
        accounts = self.service.getAll()
        self.assertIsNotNone(accounts)
        self.assertGreater(len(accounts), 0)
        ids = [a.getId() for a in accounts]
        self.assertIn(a1.getId(), ids)
        self.assertIn(a2.getId(), ids)

    def test_15_get_all_by_type(self):
        """–¢–µ—Å—Ç 15: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤ –ø–æ —Ç–∏–ø—É"""
        a1 = self.service.get("–°—á–µ—Ç —Ç–∏–ø–∞ 1", 1000, 1, 1, 0)
        a2 = self.service.get("–°—á–µ—Ç —Ç–∏–ø–∞ 2", 2000, 2, 1, 0)
        self.test_account_ids.append(a1.getId())
        self.test_account_ids.append(a2.getId())

        accounts_type_1 = self.service.getAllByType(1)
        accounts_type_2 = self.service.getAllByType(2)

        self.assertGreater(len(accounts_type_1), 0)
        self.assertGreater(len(accounts_type_2), 0)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—à–∏ —Å—á–µ—Ç–∞ –µ—Å—Ç—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–ø–∏—Å–∫–∞—Ö
        type_1_ids = [a.getId() for a in accounts_type_1]
        type_2_ids = [a.getId() for a in accounts_type_2]

        self.assertIn(a1.getId(), type_1_ids)
        self.assertIn(a2.getId(), type_2_ids)

    def test_16_get_all_by_currency_id(self):
        """–¢–µ—Å—Ç 16: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤ –ø–æ ID –≤–∞–ª—é—Ç—ã"""
        a1 = self.service.get("–°—á–µ—Ç –≤–∞–ª—é—Ç—ã 1", 1000, 1, 1, 0)
        a2 = self.service.get("–°—á–µ—Ç –≤–∞–ª—é—Ç—ã 2", 2000, 1, 2, 0)
        self.test_account_ids.append(a1.getId())
        self.test_account_ids.append(a2.getId())

        accounts_currency_1 = self.service.getAllByCurrencyId(1)
        accounts_currency_2 = self.service.getAllByCurrencyId(2)

        self.assertGreater(len(accounts_currency_1), 0)
        self.assertGreater(len(accounts_currency_2), 0)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—à–∏ —Å—á–µ—Ç–∞ –µ—Å—Ç—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–ø–∏—Å–∫–∞—Ö
        currency_1_ids = [a.getId() for a in accounts_currency_1]
        currency_2_ids = [a.getId() for a in accounts_currency_2]

        self.assertIn(a1.getId(), currency_1_ids)
        self.assertIn(a2.getId(), currency_2_ids)

    def test_17_get_existing_account_with_different_parameters(self):
        """–¢–µ—Å—Ç 17: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å—á–µ—Ç–∞ —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–¥–æ–ª–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å)"""
        title = "–°—á–µ—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"

        # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        account1 = self.service.get(title, 0, 1, 1, 0)
        self.test_account_ids.append(account1.getId())

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—Ç –∂–µ —Å—á–µ—Ç —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        account2 = self.service.get(title, 5000, 2, 2, 1)
        self.test_account_ids.append(account2.getId())

        # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ—Ç –∂–µ —Å—á–µ—Ç, –Ω–æ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        self.assertEqual(account1.getId(), account2.getId())
        self.assertEqual(account2.getAmount(), 5000)
        self.assertEqual(account2.getType(), 2)
        self.assertEqual(account2.getCurrencyId(), 2)
        self.assertEqual(account2.getClosed(), 1)

    def test_18_update_account_with_all_parameters(self):
        """–¢–µ—Å—Ç 18: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞ —Å–æ –≤—Å–µ–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""

        # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç
        account = self.service.get("–°—á–µ—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", 0, 1, 1, 0)
        self.test_account_ids.append(account.getId())

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        updated = self.service.get("–°—á–µ—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", 15000, 2, 2, 1)

        self.assertEqual(updated.getTitle(), "–°—á–µ—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        self.assertEqual(updated.getAmount(), 15000)
        self.assertEqual(updated.getType(), 2)
        self.assertEqual(updated.getCurrencyId(), 2)
        self.assertEqual(updated.getClosed(), 1)

    def test_19_update_account_with_no_parameters(self):
        """–¢–µ—Å—Ç 19: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å null)"""

        # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç
        account = self.service.get("–°—á–µ—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π", 0, 1, 1, 0)
        self.test_account_ids.append(account.getId())

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        updated = self.service.update("–°—á–µ—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π", None, None, None, None)

        self.assertIsNone(updated)

    def test_20_delete_account_not_found(self):
        """–¢–µ—Å—Ç 20: –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å—á–µ—Ç–∞"""
        # Act
        result = self.service.delete("–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—á–µ—Ç")

        # Assert
        self.assertFalse(result)

    def test_21_change_position_same_position(self):
        """–¢–µ—Å—Ç 21: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ —Ç—É –∂–µ –ø–æ–∑–∏—Ü–∏—é"""
        # Arrange
        account = self.service.get("–¢–µ—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç", 0, 1, 1, 0)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
        self.test_account_ids.append(account.getId())

        original_position = account.getPosition()

        # Act
        result = self.service.changePosition(account, original_position)

        # Assert
        self.assertEqual(result.getPosition(), original_position)

    def test_22_change_position_invalid_position(self):
        """–¢–µ—Å—Ç 22: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—É—é"""
        # Arrange
        account = self.service.get("–¢–µ—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç", 0, 1, 1, 0)
        position = self.repository.getMaxPosition()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
        self.test_account_ids.append(account.getId())

        # Act & Assert
        with self.assertRaises(Exception):
            self.service.changePosition(account, 0)  # –ü–æ–∑–∏—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å >= 1

        with self.assertRaises(Exception):
            self.service.changePosition(account, position + 1)  # –ü–æ–∑–∏—Ü–∏—è –±–æ–ª—å—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—á–µ—Ç–æ–≤

    def test_23_change_position_move_down(self):
        """–¢–µ—Å—Ç 23: –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –≤–Ω–∏–∑"""
        # Arrange
        position = self.repository.getMaxPosition()
        account1 = self.service.get("–°—á–µ—Ç 1", 0, 1, 1, 0)
        account2 = self.service.get("–°—á–µ—Ç 2", 0, 1, 1, 0)
        account3 = self.service.get("–°—á–µ—Ç 3", 0, 1, 1, 0)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
        self.test_account_ids.append(account1.getId())
        self.test_account_ids.append(account2.getId())
        self.test_account_ids.append(account3.getId())

        # Act
        result = self.service.changePosition(account1, position + 3)

        # Assert
        self.assertEqual(result.getPosition(), position + 3)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥—Ä—É–≥–∏–µ —Å—á–µ—Ç–∞ —Å–¥–≤–∏–Ω—É–ª–∏—Å—å
        updated_account2 = self.repository.findById(account2.getId()).get()
        updated_account3 = self.repository.findById(account3.getId()).get()
        self.assertEqual(updated_account2.getPosition(), position + 1)
        self.assertEqual(updated_account3.getPosition(), position + 2)

    def test_24_change_position_move_up(self):
        """–¢–µ—Å—Ç 24: –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –≤–≤–µ—Ä—Ö"""
        # Arrange
        account1 = self.service.get("–°—á–µ—Ç 11", 0, 1, 1, 0)
        account2 = self.service.get("–°—á–µ—Ç 21", 0, 1, 1, 0)
        account3 = self.service.get("–°—á–µ—Ç 31", 0, 1, 1, 0)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
        self.test_account_ids.append(account1.getId())
        self.test_account_ids.append(account2.getId())
        self.test_account_ids.append(account3.getId())
        position = self.repository.getMaxPosition()
        # Act
        result = self.service.changePosition(account3, position - 2)

        # Assert
        self.assertEqual(result.getPosition(), position - 2)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥—Ä—É–≥–∏–µ —Å—á–µ—Ç–∞ —Å–¥–≤–∏–Ω—É–ª–∏—Å—å
        updated_account1 = self.repository.findById(account1.getId()).get()
        updated_account2 = self.repository.findById(account2.getId()).get()
        self.assertEqual(updated_account1.getPosition(), position - 1)
        self.assertEqual(updated_account2.getPosition(), position)

    def test_25_change_position_by_old_new(self):
        """–¢–µ—Å—Ç 25: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ä–æ–π –∏ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        # Arrange
        account1 = self.service.get("–°—á–µ—Ç 511", 0, 1, 1, 0)
        account2 = self.service.get("–°—á–µ—Ç 521", 0, 1, 1, 0)
        account3 = self.service.get("–°—á–µ—Ç 531", 0, 1, 1, 0)
        position = self.repository.getMaxPosition()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
        self.test_account_ids.append(account1.getId())
        self.test_account_ids.append(account2.getId())
        self.test_account_ids.append(account3.getId())

        # Act
        result = self.service.changePosition(position, position - 2)

        # Assert
        self.assertIsNotNone(result)
        self.assertEqual(result.getPosition(), position - 2)

    def test_26_change_position_by_old_new_not_found(self):
        """–¢–µ—Å—Ç 26: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç–∞—Ä–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        # Act
        result = self.service.changePosition(999, 1)

        # Assert
        self.assertIsNone(result)

    def test_27_set_user_unsupported(self):
        """–¢–µ—Å—Ç 27: –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # Act & Assert
        with self.assertRaises(Exception):
            self.service.setUser("new_user")

    def test_28_create_account_with_special_characters(self):
        """–¢–µ—Å—Ç 28: –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏"""
        # Arrange
        title = "–°—á–µ—Ç —Å —Å–∏–º–≤–æ–ª–∞–º–∏: !@#$%^&*()"

        # Act & Assert
        with self.assertRaises(Exception) as context:
            self.service.get(title, 0, 1, 1, 0)
        self.assertIn("–ù–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã", str(context.exception))

    def test_30_create_account_empty_title(self):
        """–¢–µ—Å—Ç 30: –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ —Å –ø—É—Å—Ç—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º"""
        # Arrange
        title = ""

        # Act & Assert
        with self.assertRaises(Exception) as context:
            self.service.get(title, 0, 1, 1, 0)
        self.assertIn("–ù–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", str(context.exception))

    def test_31_create_account_null_title(self):
        """–¢–µ—Å—Ç 31: –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ —Å null –Ω–∞–∑–≤–∞–Ω–∏–µ–º"""
        # Arrange
        title = None

        # Act & Assert
        with self.assertRaises(Exception) as context:
            self.service.get(title, 0, 1, 1, 0)
        self.assertIn("–ù–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null", str(context.exception))

    def test_32_multiple_operations_same_account(self):
        """–¢–µ—Å—Ç 32: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –æ–¥–Ω–∏–º —Å—á–µ—Ç–æ–º"""
        # Arrange
        title = "–ú–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç"

        # Act
        account1 = self.service.get(title, 0, 1, 1, 0)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
        self.test_account_ids.append(account1.getId())

        account2 = self.service.get(title)
        account3 = self.service.get(title)

        # Assert
        self.assertEqual(account1.getId(), account2.getId())
        self.assertEqual(account2.getId(), account3.getId())
        self.assertEqual(account1.getTitle(), title)

    def test_33_account_position_sequence(self):
        """–¢–µ—Å—Ç 33: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π —Å—á–µ—Ç–æ–≤"""
        # Arrange
        titles = ["–°—á–µ—Ç AA", "–°—á–µ—Ç BB", "–°—á–µ—Ç CC", "–°—á–µ—Ç DD"]
        position = self.repository.getMaxPosition()
        # Act
        accounts = []
        for title in titles:
            account = self.service.get(title, 0, 1, 1, 0)
            accounts.append(account)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
            self.test_account_ids.append(account.getId())

        # Assert
        for i, account in enumerate(accounts):
            position += 1
            self.assertEqual(account.getPosition(), position)

    def test_34_delete_and_restore_cycle(self):
        """–¢–µ—Å—Ç 34: –¶–∏–∫–ª —É–¥–∞–ª–µ–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        # Arrange
        title = "–¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π —Å—á–µ—Ç"
        account = self.service.get(title, 0, 1, 1, 0)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
        self.test_account_ids.append(account.getId())

        # Act & Assert - –ø–µ—Ä–≤—ã–π —Ü–∏–∫–ª
        self.service.delete(title)
        restored1 = self.service.get(title)
        self.assertEqual(restored1.getId(), account.getId())

        # Act & Assert - –≤—Ç–æ—Ä–æ–π —Ü–∏–∫–ª
        self.service.delete(title)
        restored2 = self.service.get(title)
        self.assertEqual(restored2.getId(), account.getId())

    def test_35_edge_case_positions(self):
        """–¢–µ—Å—Ç 35: –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –ø–æ–∑–∏—Ü–∏–π"""
        # Arrange
        account = self.service.get("–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—á–µ—Ç", 0, 1, 1, 0)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
        self.test_account_ids.append(account.getId())

        # Act & Assert - –ø–æ–∑–∏—Ü–∏—è 1 (–ø–µ—Ä–≤–∞—è)
        result1 = self.service.changePosition(account, 1)
        self.assertEqual(result1.getPosition(), 1)

        # Act & Assert - –ø–æ–∑–∏—Ü–∏—è 1 (–ø–æ—Å–ª–µ–¥–Ω—è—è, —Ç–∞–∫ –∫–∞–∫ —Å—á–µ—Ç –æ–¥–∏–Ω)
        result2 = self.service.changePosition(account, 1)
        self.assertEqual(result2.getPosition(), 1)

    def test_36_service_with_different_users(self):
        """–¢–µ—Å—Ç 36: –°–µ—Ä–≤–∏—Å —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        # Arrange
        service1 = self.AccountService(self.repository, "user1")
        service2 = self.AccountService(self.repository, "user2")

        # Act
        account1 = service1.get("–°—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1", 0, 1, 1, 0)
        account2 = service2.get("–°—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 2", 0, 1, 1, 0)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
        self.test_account_ids.append(account1.getId())
        self.test_account_ids.append(account2.getId())

        # Assert
        self.assertEqual(account1.getCreatedBy(), "user1")
        self.assertEqual(account2.getCreatedBy(), "user2")

    def test_37_repository_independence(self):
        """–¢–µ—Å—Ç 37: –ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"""
        # Arrange
        repository2 = self.AccountRepository(self.test_db_path)
        service2 = self.AccountService(repository2, "user2")

        # Act
        account1 = self.service.get("–°—á–µ—Ç –≤ –ë–î 1", 0, 1, 1, 0)
        account2 = service2.get("–°—á–µ—Ç –≤ –ë–î 2", 0, 1, 1, 0)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
        self.test_account_ids.append(account1.getId())
        self.test_account_ids.append(account2.getId())

        # Assert
        self.assertNotEqual(account1.getId(), account2.getId())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ —Å—á–µ—Ç–∞ –≤–∏–¥–Ω—ã –≤ –æ–±—â–µ–π –±–∞–∑–µ
        accounts = self.service.getAll()
        account_titles = [acc.getTitle() for acc in accounts]
        self.assertIn("–°—á–µ—Ç –≤ –ë–î 1", account_titles)
        self.assertIn("–°—á–µ—Ç –≤ –ë–î 2", account_titles)


if __name__ == '__main__':
    unittest.main()
