import os
import sys
import sqlite3
from typing import List

import jpype
import jpype.imports

    
# –ü—É—Ç—å –∫ JDK (–≥–¥–µ –ª–µ–∂–∏—Ç jvm.dll)
JDK_PATH = r"C:\Users\Korenyk.A\Documents\Prodjects\jdk-17.0.12\bin"

# –ü—É—Ç—å –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º
LIB_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", "lib"))

# –°–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö JAR —Ñ–∞–π–ª–æ–≤
REQUIRED_JARS = [
    "sqlite-jdbc-3.45.1.0.jar",
    "slf4j-api-2.0.13.jar",
    "slf4j-simple-2.0.13.jar",
]

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å JAR —Ñ–∞–π–ª–∞–º–∏ –±–µ–∫–µ–Ω–¥–∞
LIB_JAR_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", "backend-jar"))

# –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "test_budget_master.db",))

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤–µ—Ä—Å–∏–∏ –±–µ–∫–µ–Ω–¥–∞
VERSION_PATH = os.path.join(os.path.dirname(__file__), "..", "..", "backend", "com", "sadengineer", "budgetmaster", "backend", "VERSION")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä JPypeSetup –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
_GLOBAL_JPYPE_SETUP = None  


def get_jar_version() -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ VERSION_PATH"""
    try:
        version_path = VERSION_PATH
        with open(version_path, 'r', encoding='utf-8') as f:
            version = f.read().strip()
            return version
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤–µ—Ä—Å–∏—é –∏–∑ backend/com/sadengineer/budgetmaster/backend/VERSION: {e}")
        return "0.0.012"  # –í–µ—Ä—Å–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
        
class JPypeSetup:
    """–ö–ª–∞—Å—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è JPype –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º"""

    def __init__(self):
        self.JDK_PATH = JDK_PATH
        self.LIB_PATH = LIB_PATH
        self.DB_PATH = DB_PATH
        self.JAR_VERSION = get_jar_version()
        self.LIB_JAR_PATH = LIB_JAR_PATH
        self.MAIN_JAR_PATH = os.path.join(self.LIB_JAR_PATH, f"budgetmaster-backend-{self.JAR_VERSION}.jar")
        self.CLASSPATH = (
            self.MAIN_JAR_PATH
            + os.pathsep
            + os.path.join(self.LIB_PATH, "sqlite-jdbc-3.45.1.0.jar")
            + os.pathsep
            + os.path.join(self.LIB_PATH, "slf4j-api-2.0.13.jar")
            + os.pathsep
            + os.path.join(self.LIB_PATH, "slf4j-simple-2.0.13.jar")
        )
        self.jvm_started = False
        self.java_classes = {}

    def check_prerequisites(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        print(f"Classpath: {self.CLASSPATH}")
        print(f"Database: {self.DB_PATH}")
        print(f"JAR Version: {self.JAR_VERSION}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π JAR —Ñ–∞–π–ª
        if not os.path.exists(self.MAIN_JAR_PATH):
            print(f"‚ùå –û—Å–Ω–æ–≤–Ω–æ–π JAR —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.MAIN_JAR_PATH}")
            return False
        else:
            print(f"‚úÖ JAR —Ñ–∞–π–ª: {self.MAIN_JAR_PATH}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        for jar in REQUIRED_JARS:
            jar_path = os.path.join(self.LIB_PATH, jar)
            if not os.path.exists(jar_path):
                print(f"‚ùå JAR —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {jar_path}")
                return False

        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
        return True

    def create_database_if_not_exists(self) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        if os.path.exists(self.DB_PATH):
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {self.DB_PATH}")
            return True

        print(f"üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.DB_PATH}")
        print("üîß –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º JVM –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
            if not self.jvm_started:
                self.start_jvm()

            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å –∏–∑ Jar
            DatabaseUtil = self.get_class("com.sadengineer.budgetmaster.backend.util.DatabaseUtil")

            # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            DatabaseUtil.createDatabaseIfNotExists(self.DB_PATH)

            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: {self.DB_PATH}")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

    def start_jvm(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç JVM –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã"""
        if self.jvm_started:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —É–∂–µ JVM
        if jpype.isJVMStarted():
            print("‚úÖ JVM —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            self.jvm_started = True
            return

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º JVM
            jpype.startJVM(
                jvmpath=os.path.join(self.JDK_PATH, "server", "jvm.dll"),
                classpath=self.CLASSPATH,
                convertStrings=True,
                ignoreUnrecognized=True
            )

            # –ó–∞–≥—Ä—É–∂–∞–µ–º SQLite –¥—Ä–∞–π–≤–µ—Ä
            Class = jpype.JClass("java.lang.Class")
            Class.forName("org.sqlite.JDBC")
            print("‚úÖ SQLite –¥—Ä–∞–π–≤–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω")

            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
            self.java_classes = {
                'LocalDateTime': jpype.JClass("java.time.LocalDateTime"),
                'DateTimeUtil': jpype.JClass("com.sadengineer.budgetmaster.backend.util.DateTimeUtil"),
                'DatabaseUtil': jpype.JClass("com.sadengineer.budgetmaster.backend.util.DatabaseUtil"),
                'PlatformUtil': jpype.JClass("com.sadengineer.budgetmaster.backend.util.PlatformUtil"),
            }

            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DatabaseProvider
            try:
                self.java_classes['PlatformUtil'].initializeDatabaseProvider(None)
                print("‚úÖ DatabaseProvider –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å DatabaseProvider: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤

            print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
            self.jvm_started = True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ JVM: {e}")
            # –ù–µ –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ access violation –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º
            # –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–µ—Ä—Å–∏–π JPype –Ω–∞ Windows
            self.jvm_started = True

    def get_class(self, class_name: str):
        """–ü–æ–ª—É—á–∞–µ—Ç Java –∫–ª–∞—Å—Å –ø–æ –∏–º–µ–Ω–∏"""
        if not self.jvm_started:
            self.start_jvm()

        if class_name not in self.java_classes:
            try:
                self.java_classes[class_name] = jpype.JClass(class_name)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–ª–∞—Å—Å–∞ {class_name}: {e}")
                raise

        return self.java_classes[class_name]

    def shutdown_jvm(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç JVM"""
        try:
            if jpype.isJVMStarted():
                # –û—á–∏—â–∞–µ–º –∫—ç—à –∫–ª–∞—Å—Å–æ–≤ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
                self.java_classes.clear()
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º JVM
                jpype.shutdownJVM()
                self.jvm_started = False
                print("‚úÖ JVM –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            else:
                print("‚ÑπÔ∏è JVM –Ω–µ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞")
        except Exception as e:
            print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ JVM: {e}")
            self.jvm_started = False


class DatabaseManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self, db_path: str):
        self.db_path = db_path

    def execute_query(self, query: str, params: tuple = None) -> List[tuple]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()

            if params:
                cursor.execute(query, params)
            else:
                cursor.execute(query)

            results = cursor.fetchall()
            conn.close()
            return results

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return []

    def execute_update(self, query: str, params: tuple = None) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()

            if params:
                cursor.execute(query, params)
            else:
                cursor.execute(query)

            conn.commit()
            conn.close()
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return False

    def get_table_info(self, table_name: str) -> List[tuple]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã"""
        return self.execute_query(f"PRAGMA table_info({table_name})")

    def get_table_columns(self, table_name: str) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ã"""
        table_info = self.get_table_info(table_name)
        return [col[1] for col in table_info]

    def check_database_exists(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        return os.path.exists(self.db_path)

    def get_database_size(self) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–π—Ç–∞—Ö"""
        if os.path.exists(self.db_path):
            return os.path.getsize(self.db_path)
        return 0

    def get_database_info(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        info = {
            'exists': self.check_database_exists(),
            'path': self.db_path,
            'size_bytes': self.get_database_size()
        }

        if info['exists']:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
            tables = self.execute_query("SELECT name FROM sqlite_master WHERE type='table'")
            info['tables'] = [table[0] for table in tables]

        return info


class TestDataManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""

    def __init__(self, db_manager: DatabaseManager):
        self.db_manager = db_manager
        self.test_ids = []

    def add_test_id(self, table_name: str, entity_id: int):
        """–î–æ–±–∞–≤–ª—è–µ—Ç ID —Ç–µ—Å—Ç–æ–≤–æ–π —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏"""
        self.test_ids.append((table_name, entity_id))

    def cleanup_test_data(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        print("üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

        for table_name, entity_id in self.test_ids:
            try:
                # –£–¥–∞–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ ID
                self.db_manager.execute_update(
                    f"DELETE FROM {table_name} WHERE id = ?",
                    (entity_id,),
                )
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å: {table_name}.id = {entity_id}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ {table_name}.id = {entity_id}: {e}")

        self.test_ids.clear()
        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    def clear_all_tables(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç"""
        print("üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü...")

        try:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü
            tables = ['operations', 'budgets', 'categories', 'accounts', 'currencies']

            for table in tables:
                self.db_manager.execute_update(f"DELETE FROM {table}")
                print(f"‚úÖ –û—á–∏—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: {table}")

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç
            for table in tables:
                self.db_manager.execute_update(f"DELETE FROM sqlite_sequence WHERE name = '{table}'")

            print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –æ—á–∏—â–µ–Ω—ã –∏ –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å–±—Ä–æ—à–µ–Ω")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü: {e}")


def setup_test_environment():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")

    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä JPypeSetup
    jpype_setup = JPypeSetup()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    if not jpype_setup.check_prerequisites():
        print("‚ùå –ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
        return None

    # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if not jpype_setup.create_database_if_not_exists():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        return None

    # –°–æ–∑–¥–∞–µ–º DatabaseManager
    db_manager = DatabaseManager(jpype_setup.DB_PATH)

    # –°–æ–∑–¥–∞–µ–º TestDataManager
    test_data_manager = TestDataManager(db_manager)

    print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    return jpype_setup, db_manager, test_data_manager


def get_java_class(class_name: str):
    """–ü–æ–ª—É—á–∞–µ—Ç Java –∫–ª–∞—Å—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö"""
    global _GLOBAL_JPYPE_SETUP
    if _GLOBAL_JPYPE_SETUP is None:
        _GLOBAL_JPYPE_SETUP = JPypeSetup()
    return _GLOBAL_JPYPE_SETUP.get_class(class_name)


def create_test_entity(entity_class, **kwargs):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Å—É—â–Ω–æ—Å—Ç—å —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º LocalDateTime –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏
        LocalDateTime = get_java_class("java.time.LocalDateTime")

        # –°–æ–∑–¥–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
        entity = entity_class(
            id=kwargs.get('id', 0),
            createdTime=LocalDateTime.now(),
            updatedTime=kwargs.get('updatedTime'),
            deletedTime=kwargs.get('deletedTime'),
            createdBy=kwargs.get('createdBy', 'test'),
            updatedBy=kwargs.get('updatedBy'),
            deletedBy=kwargs.get('deletedBy'),
            **{
                k: v
                for k, v in kwargs.items()
                if k not in ['id', 'createdTime', 'updatedTime', 'deletedTime', 'createdBy', 'updatedBy', 'deletedBy']
            },
        )

        return entity
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—É—â–Ω–æ—Å—Ç–∏: {e}")
        return None


def print_database_status():
    """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    db_manager = DatabaseManager(DB_PATH)
    info = db_manager.get_database_info()

    print("üìä –°—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    print(f"   –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {info['exists']}")
    print(f"   –ü—É—Ç—å: {info['path']}")
    print(f"   –†–∞–∑–º–µ—Ä: {info['size_bytes']} –±–∞–π—Ç")

    if info['exists'] and 'tables' in info:
        print(f"   –¢–∞–±–ª–∏—Ü—ã: {', '.join(info['tables'])}")


print_database_status()
