import os
import sys
import unittest

from tests.backend.test_common import cleanup_example, get_java_class, setup_example

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(__file__)))


class TestCurrencyRepository(unittest.TestCase):
    """–Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã –¥–ª—è CurrencyRepository"""

    @classmethod
    def setUpClass(cls):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ —Ç–µ—Å—Ç–∞–º–∏"""
        result = setup_example()
        if result is None:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ setup_example
        cls.jpype_setup, cls.db_manager, cls.test_data_manager = result

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Java –∫–ª–∞—Å—Å—ã
        cls.Currency = get_java_class("com.sadengineer.budgetmaster.backend.model.Currency")
        cls.CurrencyRepository = get_java_class("com.sadengineer.budgetmaster.backend.repository.CurrencyRepository")
        cls.LocalDateTime = get_java_class("java.time.LocalDateTime")
        cls.Integer = get_java_class("java.lang.Integer")
        cls.PlatformUtil = get_java_class("com.sadengineer.budgetmaster.backend.util.PlatformUtil")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DatabaseProvider –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        cls.PlatformUtil.initializeDatabaseProvider(None)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º DB_PATH –∏–∑ test_common.py
        cls.test_db_path = cls.db_manager.db_path

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
        cls.DatabaseUtil = get_java_class("com.sadengineer.budgetmaster.backend.util.DatabaseUtil")
        cls.DatabaseUtil.createDatabaseIfNotExists(cls.test_db_path)
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {cls.test_db_path}")

        cls.repo = cls.CurrencyRepository(cls.test_db_path)

        # –°–ø–∏—Å–æ–∫ ID —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        cls.test_currency_ids = []

    @classmethod
    def tearDownClass(cls):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_manager = cls.db_manager

            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ ID
            deleted_count = 0
            for currency_id in cls.test_currency_ids:
                try:
                    success = db_manager.execute_update("DELETE FROM currencies WHERE id = ?", (currency_id,))
                    if success:
                        deleted_count += 1
                    else:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã {currency_id}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã {currency_id}: {e}")

            if deleted_count > 0:
                print(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–∞–ª—é—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

            cleanup_example()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
        finally:
            # –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º JVM –∑–¥–µ—Å—å - –ø—É—Å—Ç—å —ç—Ç–æ –¥–µ–ª–∞–µ—Ç atexit
            pass

    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        print(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É: {self.test_db_path}")
        self.DatabaseUtil.createDatabaseIfNotExists(self.test_db_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–∑–∞ —Å–æ–∑–¥–∞–Ω–∞
        if os.path.exists(self.test_db_path):
            file_size = os.path.getsize(self.test_db_path)
            print(f"‚úÖ –ë–∞–∑–∞ —Å–æ–∑–¥–∞–Ω–∞, —Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
        else:
            print(f"‚ùå –ë–∞–∑–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞: {self.test_db_path}")

        self.max_position = self.repo.getMaxPosition()

    def create_test_currency(self, title="–¢–µ—Å—Ç–æ–≤–∞—è –≤–∞–ª—é—Ç–∞", position=None):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –≤–∞–ª—é—Ç—É"""
        if position is None:
            position = self.repo.getMaxPosition() + 1

        currency = self.Currency()
        currency.setTitle(title)
        currency.setPosition(position)
        currency.setCreatedBy("test_user")
        currency.setUpdatedBy("test_user")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã
        now = self.LocalDateTime.now()
        currency.setCreateTime(now)
        currency.setUpdateTime(now)
        currency.setDeleteTime(None)

        return currency

    def test_01_delete_by_id(self):
        """–¢–µ—Å—Ç 01: –£–¥–∞–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã –ø–æ ID"""
        # Arrange
        currency = self.create_test_currency("–í–∞–ª—é—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        saved_currency = self.repo.save(currency)
        self.test_currency_ids.append(saved_currency.getId())

        # Act
        deleted = self.repo.deleteById(saved_currency.getId(), "test_delete")

        # Assert
        self.assertTrue(deleted)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–ª—é—Ç–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–∞—è
        found = self.repo.findById(saved_currency.getId())
        self.assertTrue(found.isPresent())
        deleted_currency = found.get()
        self.assertIsNotNone(deleted_currency.getDeleteTime())
        self.assertEqual(deleted_currency.getDeletedBy(), "test_delete")

    def test_02_delete_by_title(self):
        """–¢–µ—Å—Ç 02: –£–¥–∞–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        # Arrange
        currency = self.create_test_currency("–í–∞–ª—é—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
        saved_currency = self.repo.save(currency)
        self.test_currency_ids.append(saved_currency.getId())

        # Act
        deleted = self.repo.deleteByTitle("–í–∞–ª—é—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", "test_delete_title")

        # Assert
        self.assertTrue(deleted)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–ª—é—Ç–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–∞—è
        found = self.repo.findById(saved_currency.getId())
        self.assertTrue(found.isPresent())
        deleted_currency = found.get()
        self.assertIsNotNone(deleted_currency.getDeleteTime())
        self.assertEqual(deleted_currency.getDeletedBy(), "test_delete_title")

    def test_03_find_all(self):
        """–¢–µ—Å—Ç 03: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∞–ª—é—Ç"""
        # Arrange
        currency1 = self.create_test_currency("–í–∞–ª—é—Ç–∞ 1", self.repo.getMaxPosition() + 1)
        currency2 = self.create_test_currency("–í–∞–ª—é—Ç–∞ 2", self.repo.getMaxPosition() + 2)

        saved1 = self.repo.save(currency1)
        saved2 = self.repo.save(currency2)
        self.test_currency_ids.extend([saved1.getId(), saved2.getId()])

        # Act
        all_currencies = self.repo.findAll()

        # Assert
        # Java –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ArrayList, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è
        self.assertIsNotNone(all_currencies)
        self.assertGreater(all_currencies.size(), 0)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—à–∏ –≤–∞–ª—é—Ç—ã –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
        titles = []
        for curr in all_currencies:
            titles.append(curr.getTitle())
        self.assertIn("–í–∞–ª—é—Ç–∞ 1", titles)
        self.assertIn("–í–∞–ª—é—Ç–∞ 2", titles)

    def test_04_find_by_id(self):
        """–¢–µ—Å—Ç 04: –ü–æ–∏—Å–∫ –≤–∞–ª—é—Ç—ã –ø–æ ID"""
        # Arrange
        currency = self.create_test_currency("–í–∞–ª—é—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞")
        saved_currency = self.repo.save(currency)
        self.test_currency_ids.append(saved_currency.getId())

        # Act
        found_currency = self.repo.findById(saved_currency.getId())

        # Assert
        self.assertTrue(found_currency.isPresent())
        found = found_currency.get()
        self.assertEqual(found.getId(), saved_currency.getId())
        self.assertEqual(found.getTitle(), "–í–∞–ª—é—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞")

    def test_05_find_by_title(self):
        """–¢–µ—Å—Ç 05: –ü–æ–∏—Å–∫ –≤–∞–ª—é—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        # Arrange
        unique_title = f"–£–Ω–∏–∫–∞–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞ {self.LocalDateTime.now().toString()}"
        currency = self.create_test_currency(unique_title)
        saved_currency = self.repo.save(currency)
        self.test_currency_ids.append(saved_currency.getId())

        # Act
        found_currency = self.repo.findByTitle(unique_title)

        # Assert
        self.assertTrue(found_currency.isPresent())
        found = found_currency.get()
        self.assertEqual(found.getId(), saved_currency.getId())
        self.assertEqual(found.getTitle(), unique_title)

    def test_06_get_max_position(self):
        """–¢–µ—Å—Ç 06: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        # Arrange
        currency1 = self.create_test_currency("–í–∞–ª—é—Ç–∞ 1", self.repo.getMaxPosition() + 1)
        currency2 = self.create_test_currency("–í–∞–ª—é—Ç–∞ 2", self.repo.getMaxPosition() + 2)

        saved1 = self.repo.save(currency1)
        saved2 = self.repo.save(currency2)
        self.test_currency_ids.extend([saved1.getId(), saved2.getId()])

        # Act
        max_position = self.repo.getMaxPosition()

        # Assert
        self.assertIsInstance(max_position, int)
        self.assertGreater(max_position, 0)
        self.assertGreaterEqual(max_position, saved2.getPosition())

    def test_07_save_currency(self):
        """–¢–µ—Å—Ç 07: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∞–ª—é—Ç—ã"""
        # Arrange
        currency = self.create_test_currency("–í–∞–ª—é—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

        # Act
        saved_currency = self.repo.save(currency)

        # Assert
        self.assertIsNotNone(saved_currency)
        self.assertGreater(saved_currency.getId(), 0)
        self.assertEqual(saved_currency.getTitle(), "–í–∞–ª—é—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        self.assertEqual(saved_currency.getPosition(), currency.getPosition())

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        self.test_currency_ids.append(saved_currency.getId())

    def test_08_update_currency(self):
        """–¢–µ—Å—Ç 08: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã"""
        # Arrange
        currency = self.create_test_currency("–í–∞–ª—é—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        saved_currency = self.repo.save(currency)
        self.test_currency_ids.append(saved_currency.getId())

        # Act
        saved_currency.setTitle("–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞")
        saved_currency.setPosition(999)
        saved_currency.setUpdatedBy("test_update")
        updated_currency = self.repo.update(saved_currency)

        # Assert
        self.assertEqual(updated_currency.getTitle(), "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞")
        self.assertEqual(updated_currency.getPosition(), 999)
        self.assertEqual(updated_currency.getUpdatedBy(), "test_update")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –ë–î
        found = self.repo.findById(saved_currency.getId())
        self.assertTrue(found.isPresent())
        found_currency = found.get()
        self.assertEqual(found_currency.getTitle(), "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞")
        self.assertEqual(found_currency.getPosition(), 999)

    def test_09_find_nonexistent_currency(self):
        """–¢–µ—Å—Ç 09: –ü–æ–∏—Å–∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≤–∞–ª—é—Ç—ã (findById)"""
        # Act
        found_currency = self.repo.findById(self.Integer(99999))

        # Assert
        self.assertFalse(found_currency.isPresent())

    def test_10_delete_nonexistent_currency(self):
        """–¢–µ—Å—Ç 10: –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≤–∞–ª—é—Ç—ã (deleteById)"""
        # Act
        deleted = self.repo.deleteById(self.Integer(99999), "test_user")

        # Assert
        self.assertFalse(deleted)

    def test_11_delete_nonexistent_currency_by_title(self):
        """–¢–µ—Å—Ç 11: –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≤–∞–ª—é—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (deleteByTitle)"""
        # Act
        deleted = self.repo.deleteByTitle("–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –≤–∞–ª—é—Ç–∞", "test_user")

        # Assert
        self.assertFalse(deleted)

    def test_12_currency_position_ordering(self):
        """–¢–µ—Å—Ç 12: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (getMaxPosition)"""
        # Arrange
        currency1 = self.create_test_currency("–í–∞–ª—é—Ç–∞ –ø–æ–∑–∏—Ü–∏—è 1", 1)
        currency2 = self.create_test_currency("–í–∞–ª—é—Ç–∞ –ø–æ–∑–∏—Ü–∏—è 2", 2)
        currency3 = self.create_test_currency("–í–∞–ª—é—Ç–∞ –ø–æ–∑–∏—Ü–∏—è 3", 3)

        saved1 = self.repo.save(currency1)
        saved2 = self.repo.save(currency2)
        saved3 = self.repo.save(currency3)
        self.test_currency_ids.extend([saved1.getId(), saved2.getId(), saved3.getId()])

        # Act
        all_currencies = self.repo.findAll()

        # Assert
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–ª—é—Ç—ã —Å –Ω–∞—à–∏–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
        positions = []
        for curr in all_currencies:
            positions.append(curr.getPosition())
        self.assertIn(1, positions)
        self.assertIn(2, positions)
        self.assertIn(3, positions)

    def test_13_currency_soft_delete_behavior(self):
        """–¢–µ—Å—Ç 13: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è soft delete (deleteById)"""
        # Arrange
        currency = self.create_test_currency("–í–∞–ª—é—Ç–∞ –¥–ª—è soft delete")
        saved_currency = self.repo.save(currency)
        self.test_currency_ids.append(saved_currency.getId())

        # Act - —É–¥–∞–ª—è–µ–º –≤–∞–ª—é—Ç—É
        deleted = self.repo.deleteById(saved_currency.getId(), "test_soft_delete")

        # Assert
        self.assertTrue(deleted)

        # –í–∞–ª—é—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–∞—è
        found = self.repo.findById(saved_currency.getId())
        self.assertTrue(found.isPresent())
        deleted_currency = found.get()
        self.assertIsNotNone(deleted_currency.getDeleteTime())
        self.assertEqual(deleted_currency.getDeletedBy(), "test_soft_delete")

        # –í–∞–ª—é—Ç–∞ –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è –≤ —Å–ø–∏—Å–∫–µ –≤—Å–µ—Ö –≤–∞–ª—é—Ç (–≤–∫–ª—é—á–∞—è —É–¥–∞–ª–µ–Ω–Ω—ã–µ)
        all_currencies = self.repo.findAll()
        currency_ids = []
        for curr in all_currencies:
            currency_ids.append(curr.getId())
        self.assertIn(saved_currency.getId(), currency_ids)

    def test_14_currency_with_special_characters(self):
        """–¢–µ—Å—Ç 14: –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ (mapRowSafe)"""
        # Arrange
        currency = self.create_test_currency("‚Ç¨ –ï–≤—Ä–æ (EUR)")

        # Act
        saved_currency = self.repo.save(currency)
        self.test_currency_ids.append(saved_currency.getId())

        # Assert
        self.assertEqual(saved_currency.getTitle(), "‚Ç¨ –ï–≤—Ä–æ (EUR)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –ë–î
        found = self.repo.findById(saved_currency.getId())
        self.assertTrue(found.isPresent())
        found_currency = found.get()
        self.assertEqual(found_currency.getTitle(), "‚Ç¨ –ï–≤—Ä–æ (EUR)")

    def test_15_currency_with_long_title(self):
        """–¢–µ—Å—Ç 15: –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã —Å –¥–ª–∏–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º (mapRowSafe)"""
        # Arrange
        long_title = "–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"
        currency = self.create_test_currency(long_title)

        # Act
        saved_currency = self.repo.save(currency)
        self.test_currency_ids.append(saved_currency.getId())

        # Assert
        self.assertEqual(saved_currency.getTitle(), long_title)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å –≤ –ë–î
        found = self.repo.findById(saved_currency.getId())
        self.assertTrue(found.isPresent())
        found_currency = found.get()
        self.assertEqual(found_currency.getTitle(), long_title)

    def test_16_currency_case_sensitive_search(self):
        """–¢–µ—Å—Ç 16: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É –ø—Ä–∏ –ø–æ–∏—Å–∫–µ (findByTitle)"""
        # Arrange
        currency = self.create_test_currency("–î–æ–ª–ª–∞—Ä –°–®–ê")
        saved_currency = self.repo.save(currency)
        self.test_currency_ids.append(saved_currency.getId())

        # Act & Assert - –ø–æ–∏—Å–∫ —Å —Ä–∞–∑–Ω—ã–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º
        found_exact = self.repo.findByTitle("–î–æ–ª–ª–∞—Ä –°–®–ê")
        found_upper = self.repo.findByTitle("–î–û–õ–õ–ê–† –°–®–ê")
        found_lower = self.repo.findByTitle("–¥–æ–ª–ª–∞—Ä —Å—à–∞")

        # Assert
        self.assertTrue(found_exact.isPresent())
        self.assertFalse(found_upper.isPresent())  # –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É
        self.assertFalse(found_lower.isPresent())  # –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É

    def test_17_currency_null_fields_handling(self):
        """–¢–µ—Å—Ç 17: –û–±—Ä–∞–±–æ—Ç–∫–∞ NULL –ø–æ–ª–µ–π –≤–∞–ª—é—Ç—ã (mapRowSafe)"""
        # Arrange
        currency = self.create_test_currency("–í–∞–ª—é—Ç–∞ —Å NULL –ø–æ–ª—è–º–∏")
        currency.setCreatedBy(None)
        currency.setUpdatedBy(None)
        currency.setDeleteTime(None)

        # Act
        saved_currency = self.repo.save(currency)
        self.test_currency_ids.append(saved_currency.getId())

        # Assert
        self.assertIsNone(saved_currency.getCreatedBy())
        self.assertIsNone(saved_currency.getUpdatedBy())
        self.assertIsNone(saved_currency.getDeleteTime())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ NULL –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –ë–î
        found = self.repo.findById(saved_currency.getId())
        self.assertTrue(found.isPresent())
        found_currency = found.get()
        self.assertIsNone(found_currency.getCreatedBy())
        self.assertIsNone(found_currency.getUpdatedBy())
        self.assertIsNone(found_currency.getDeleteTime())

    def test_18_currency_update_with_null_fields(self):
        """–¢–µ—Å—Ç 18: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã —Å NULL –ø–æ–ª—è–º–∏ (mapRowSafe)"""
        # Arrange
        currency = self.create_test_currency("–í–∞–ª—é—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è NULL")
        saved_currency = self.repo.save(currency)
        self.test_currency_ids.append(saved_currency.getId())

        # Act
        saved_currency.setTitle("–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å NULL")
        saved_currency.setCreatedBy(None)
        saved_currency.setUpdatedBy(None)
        updated_currency = self.repo.update(saved_currency)

        # Assert
        self.assertEqual(updated_currency.getTitle(), "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å NULL")
        self.assertIsNone(updated_currency.getCreatedBy())
        self.assertIsNone(updated_currency.getUpdatedBy())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –ë–î
        found = self.repo.findById(saved_currency.getId())
        self.assertTrue(found.isPresent())
        found_currency = found.get()
        self.assertEqual(found_currency.getTitle(), "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å NULL")
        self.assertIsNone(found_currency.getCreatedBy())
        self.assertIsNone(found_currency.getUpdatedBy())

    def test_19_currency_duplicate_titles(self):
        """–¢–µ—Å—Ç 19: –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–ª—é—Ç —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏"""
        # Arrange
        currency1 = self.create_test_currency("–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞")
        currency2 = self.create_test_currency("–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞")

        # Act
        saved1 = self.repo.save(currency1)
        saved2 = self.repo.save(currency2)
        self.test_currency_ids.extend([saved1.getId(), saved2.getId()])

        # Assert
        self.assertNotEqual(saved1.getId(), saved2.getId())
        self.assertEqual(saved1.getTitle(), saved2.getTitle())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ findByTitle –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é
        found = self.repo.findByTitle("–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞")
        self.assertTrue(found.isPresent())
        # findByTitle –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –≤–∞–ª—é—Ç—É —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º

    def test_20_currency_edge_positions(self):
        """–¢–µ—Å—Ç 20: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–∑–∏—Ü–∏–π"""
        # Arrange
        currency_min = self.create_test_currency("–í–∞–ª—é—Ç–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π", 1)
        currency_max = self.create_test_currency("–í–∞–ª—é—Ç–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π", 999999)
        currency_zero = self.create_test_currency("–í–∞–ª—é—Ç–∞ —Å –ø–æ–∑–∏—Ü–∏–µ–π 0", 0)

        # Act
        saved_min = self.repo.save(currency_min)
        saved_max = self.repo.save(currency_max)
        saved_zero = self.repo.save(currency_zero)
        self.test_currency_ids.extend([saved_min.getId(), saved_max.getId(), saved_zero.getId()])

        # Assert
        self.assertEqual(saved_min.getPosition(), 1)
        self.assertEqual(saved_max.getPosition(), 999999)
        self.assertEqual(saved_zero.getPosition(), 0)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –≤–∞–ª—é—Ç—ã –Ω–∞–π–¥–µ–Ω—ã
        found_min = self.repo.findById(saved_min.getId())
        found_max = self.repo.findById(saved_max.getId())
        found_zero = self.repo.findById(saved_zero.getId())

        self.assertTrue(found_min.isPresent())
        self.assertTrue(found_max.isPresent())
        self.assertTrue(found_zero.isPresent())


if __name__ == '__main__':
    unittest.main(verbosity=2)
