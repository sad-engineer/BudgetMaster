#!/usr/bin/env python
# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------------------------------------------------
import asyncio

from budget_master.models import Account, Budget, Category, Currency, Operation
from budget_master.repositories import SQLiteRepository
from budget_master.services import CSVImportService, DatabaseService


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ë–î –∏ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""

    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    db_path = "../BudgetMasterBackend/budget_master.db"
    csv_dir = "../app"  # –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞ —Å CSV —Ñ–∞–π–ª–∞–º–∏

    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ SQLite –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_service = DatabaseService(db_path)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ë–î
    if await db_service.database_exists():
        print(f"üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {db_path}")
        response = input("–û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö? (y/N): ")
        if response.lower() == 'y':
            print("üóëÔ∏è –û—á–∏—â–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            await db_service.clear_database()
        else:
            print("‚ùå –ò–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω")
            return
    else:
        print("üìÅ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")

    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î
    if not await db_service.create_database():
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        return

    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

    # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    currency_repo = SQLiteRepository(db_path, Currency)
    account_repo = SQLiteRepository(db_path, Account)
    category_repo = SQLiteRepository(db_path, Category)
    budget_repo = SQLiteRepository(db_path, Budget)
    operation_repo = SQLiteRepository(db_path, Operation)

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –∏–º–ø–æ—Ä—Ç–∞
    import_service = CSVImportService(
        currency_repo=currency_repo,
        account_repo=account_repo,
        category_repo=category_repo,
        budget_repo=budget_repo,
        operation_repo=operation_repo,
    )

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    print("üì• –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–æ–≤...")

    try:
        results = await import_service.import_all_data(csv_dir)

        print("‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:")
        for entity_type, count in results.items():
            print(f"   {entity_type}: {count} –∑–∞–ø–∏—Å–µ–π")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ë–î
        db_info = await db_service.get_database_info()
        print(f"\nüìÅ –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_info['database_size'] / 1024:.2f} KB")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return

    print("\nüéâ –í—Å–µ –≥–æ—Ç–æ–≤–æ! –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏.")


if __name__ == "__main__":
    asyncio.run(main())
