Технологические стэки проекта:


=== ЯЗЫКИ ПРОГРАММИРОВАНИЯ ===
1) Java - основной язык для бэкенда
2) Python - для тестирования, сборки и утилит
3) Kotlin/Java - для Android приложения
4) SQL - для работы с базой данных


=== РАБОТА С БАЗОЙ ДАННЫХ ===
1) JDBC (Java Database Connectivity) - API для работы с БД
   - Поддержка prepared statements для безопасности
   - Автоматическое управление соединениями
   - Обработка транзакций

2) "Soft delete" (мягкое удаление)
   - Поля delete_time и deleted_by для отслеживания удалений
   - Возможность восстановления удаленных записей
   - Фильтрация удаленных записей в запросах

3) SQLite - встроенная база данных
   - Легковесность и автономность
   - Поддержка транзакций и индексов
   - Совместимость с различными платформами


=== АРХИТЕКТУРА ПРОЕКТА ===
1) Repository Pattern (паттерн репозиторий)
   - Абстракция доступа к данным
   - Единый интерфейс для всех сущностей
   - Разделение бизнес-логики и доступа к данным

2) BaseRepository - базовый класс для всех репозиториев
   - Общие методы для CRUD операций
   - Автоматическая нумерация позиций
   - Нормализация позиций без разрывов
   - Поддержка мягкого удаления и восстановления

3) Модели данных (Model)
   - Entity классы для представления сущностей
   - Поддержка аудита (create_time, update_time, created_by, updated_by)
   - Позиционирование для сортировки

4) Service Layer (слой сервисов)
   - Бизнес-логика приложения
   - Координация между репозиториями
   - Валидация данных и обработка ошибок

5) Validator Layer (слой валидации)
   - Валидация данных
   - Обработка ошибок
   - Стандартизация входных данных  


=== УПРАВЛЕНИЕ ДАННЫМИ ===
1) Автоматическая нумерация позиций
   - Поле position для сортировки записей
   - Автоматическое назначение следующего номера
   - Перестановка позиций при обновлении

2) Нормализация позиций
   - Устранение разрывов в нумерации
   - Последовательная нумерация от 1
   - Автоматическое выполнение после save/update

3) Восстановление удаленных записей
   - Поиск записей с тем же названием
   - Автоматическое восстановление при сохранении
   - Установка новой позиции для восстановленной записи


=== ОБРАБОТКА ДАТ И ВРЕМЕНИ ===
1) DateTimeUtil - утилиты для работы с датами
   - Форматирование дат для SQLite
   - Парсинг дат из SQLite
   - Совместимость с различными форматами

2) LocalDateTime - современный API для работы с датами
   - Точность до наносекунд
   - Иммутабельность объектов
   - Безопасность потоков


=== БЕЗОПАСНОСТЬ ===
1) Prepared Statements
   - Защита от SQL-инъекций
   - Автоматическое экранирование параметров
   - Оптимизация выполнения запросов

2) Управление соединениями
   - Автоматическое закрытие ресурсов (try-with-resources)
   - Изоляция транзакций
   - Обработка исключений

3) Валидация данных
   - Проверка входных параметров
   - Защита от некорректных данных
   - Логирование операций


=== СТРУКТУРА ПРОЕКТА ===
1) Модульная архитектура
   - Разделение на пакеты (model, repository, service, util, validator, constants)
   - Четкие границы ответственности
   - Легкость расширения и поддержки

2) Стандартизация
   - Единый порядок полей в таблицах
   - Консистентные имена методов
   - Унифицированная обработка ошибок

3) Многослойная архитектура
   - Backend (Java) - бизнес-логика и данные
   - Android App (Kotlin/Java) - пользовательский интерфейс
   - Python Tools - тестирование и утилиты


=== СБОРКА И РАЗВЕРТЫВАНИЕ ===
1) Java Backend
   - Компиляция с UTF-8 кодировкой
   - Автоматическое версионирование из pyproject.toml
   - Создание JAR пакетов с зависимостями
   - Размещение в папке lib/

2) Android Application
   - Gradle build system
   - Kotlin/Java разработка
   - Material Design компоненты
   - Navigation Drawer для навигации

3) Python Tools
   - Poetry для управления зависимостями
   - JPype1 для интеграции с Java
   - Pytest для тестирования
   - Автоматические скрипты сборки


=== ТЕСТИРОВАНИЕ ===
1) Unit Testing (Python)
   - Pytest framework
   - Интеграция с Java через JPype1
   - Автоматическое управление тестовой БД
   - Покрытие всех слоев приложения

2) Test Architecture
   - JPypeSetup для настройки JVM
   - DatabaseManager для работы с БД
   - TestDataManager для управления тестовыми данными
   - Автоматическая очистка после тестов

3) Test Categories
   - Models - тестирование сущностей
   - Repositories - тестирование доступа к данным
   - Services - тестирование бизнес-логики
   - Utils - тестирование утилит


=== ИНТЕГРАЦИЯ ЯЗЫКОВ ===
1) JPype1 (Python-Java Bridge)
   - Загрузка JAR файлов в Python
   - Вызов Java методов из Python
   - Управление JVM жизненным циклом
   - Обработка исключений между языками

2) Classpath Management
   - Автоматическое добавление JAR файлов
   - Управление зависимостями (SQLite JDBC, SLF4J)
   - Версионирование библиотек

3) Data Exchange
   - Конвертация типов данных
   - Передача объектов между Java и Python
   - Синхронизация состояний


=== ПРОИЗВОДИТЕЛЬНОСТЬ ===
1) Оптимизация запросов
   - Индексы для быстрого поиска
   - Эффективные JOIN операции
   - Минимизация количества запросов

2) Управление памятью
   - Автоматическое освобождение ресурсов
   - Эффективная работа с большими наборами данных
   - Оптимизация использования JVM

3) Кэширование
   - Переиспользование Java классов
   - Кэширование результатов запросов
   - Оптимизация инициализации


=== РАСШИРЯЕМОСТЬ ===
1) Гибкая архитектура
   - Легкое добавление новых сущностей
   - Расширение функциональности репозиториев
   - Поддержка новых типов данных

2) Конфигурируемость
   - Настройка поведения через параметры
   - Поддержка различных режимов работы
   - Адаптация под различные требования

3) Платформенная независимость
   - Кроссплатформенный backend
   - Мобильное приложение для Android
   - Универсальные Python утилиты


=== УПРАВЛЕНИЕ ВЕРСИЯМИ ===
1) Semantic Versioning
   - Автоматическое чтение версии из pyproject.toml
   - Включение версии в JAR файлы
   - Синхронизация версий между компонентами

2) Dependency Management
   - Poetry для Python зависимостей
   - Gradle для Android зависимостей
   - Ручное управление Java зависимостями

3) Build Automation
   - Batch скрипты для Windows
   - Python скрипты для кроссплатформенности
   - Автоматическая сборка и тестирование


=== ЛОГИРОВАНИЕ И МОНИТОРИНГ ===
1) SLF4J Framework
   - Унифицированный API логирования
   - Настраиваемые уровни логирования
   - Интеграция с различными логгерами

2) Error Handling
   - Централизованная обработка исключений
   - Детальное логирование ошибок
   - Восстановление после сбоев

3) Performance Monitoring
   - Отслеживание времени выполнения операций
   - Мониторинг использования памяти
   - Анализ производительности запросов


=== ДОКУМЕНТАЦИЯ И КОД ===
1) Code Quality
   - Следование принципам SOLID
   - Читаемость и поддерживаемость кода
   - Комментирование сложных участков

2) Project Structure
   - Логическая организация файлов
   - Разделение по функциональности
   - Стандартизация именования

3) Development Workflow
   - Git для контроля версий
   - Poetry для управления зависимостями
   - Автоматизированные скрипты сборки




