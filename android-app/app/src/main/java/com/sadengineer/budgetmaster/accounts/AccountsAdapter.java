package com.sadengineer.budgetmaster.accounts;

import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.sadengineer.budgetmaster.R;
import com.sadengineer.budgetmaster.backend.entity.Account;
import com.sadengineer.budgetmaster.animations.StandartViewHolder;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—á–µ—Ç–æ–≤ –≤ RecyclerView
 */
public class AccountsAdapter extends RecyclerView.Adapter<StandartViewHolder> {
    private static final String TAG = "AccountsAdapter";

    private List<Account> accounts = new ArrayList<>();
    private OnAccountClickListener listener;
    private OnAccountLongClickListener longClickListener;
    private boolean isSelectionMode = false;
    private Set<Integer> selectedAccounts = new HashSet<>();
    private OnSelectedAccountsChanged externalSelectedAccountsChanged;
    
    public interface OnAccountClickListener {
        void onAccountClick(Account account);
    }
    
    public interface OnAccountLongClickListener {
        void onAccountLongClick(Account account);
    }

    // –î–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞—Ä—É–∂—É (–≤ VM —á–µ—Ä–µ–∑ —Ñ—Ä–∞–≥–º–µ–Ω—Ç)
    public interface OnSelectedAccountsChanged {
        void onSelectedAccountsChanged(List<Account> selectedAccounts);
    }
    
    public AccountsAdapter(OnAccountClickListener listener) {
        this.listener = listener;
    }
    
    public void setLongClickListener(OnAccountLongClickListener longClickListener) {
        this.longClickListener = longClickListener;
    }

    public void setOnSelectedAccountsChanged(OnSelectedAccountsChanged listener) {
        this.externalSelectedAccountsChanged = listener;
    }
    
    @NonNull
    @Override
    public StandartViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.item_account, parent, false);
        StandartViewHolder holder = new StandartViewHolder(view);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ ViewHolder
        holder.setItemClickListener(itemId -> {
            if (listener != null) {
                Account account = findAccountById(itemId);
                if (account != null) {
                    listener.onAccountClick(account);
                }
            }
        });
        
        holder.setItemLongClickListener(itemId -> {
            if (longClickListener != null) {
                Account account = findAccountById(itemId);
                if (account != null) {
                    longClickListener.onAccountLongClick(account);
                }
            }
        });

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        holder.setItemSelectionListener((itemId, isSelected) -> {
            if (isSelected) {
                selectedAccounts.add(itemId);
            } else {
                selectedAccounts.remove(itemId);
            }
            
            // –°–æ–æ–±—â–∞–µ–º –Ω–∞—Ä—É–∂—É –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
            if (externalSelectedAccountsChanged != null) {
                externalSelectedAccountsChanged.onSelectedAccountsChanged(getSelectedAccounts());
            }
        });
        
        return holder;
    }
    
    @Override
    public void onBindViewHolder(@NonNull StandartViewHolder holder, int position) {
        Account account = accounts.get(position);
        holder.resetToInitialState();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
        boolean isSelected = selectedAccounts.contains(account.getId());

        Log.d(TAG, "üîÑ –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫ ViewHolder: " + account.getTitle() + " (–ø–æ–∑–∏—Ü–∏—è " + account.getPosition() + ")" +
        "ID: " + account.getId() + ", —Å—É–º–º–∞: " + account.getAmount() + ", —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞: " + isSelectionMode + ", –≤—ã–±—Ä–∞–Ω: " + isSelected); 
        holder.bind(account.getPosition(), account.getTitle(), account.getId(), 
                   account.getAmount(), isSelectionMode, isSelected);
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ
     */
    @Override
    public int getItemCount() {
        return accounts.size();
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤
     */
    public void setAccounts(List<Account> accounts) {
        this.accounts = accounts != null ? accounts : new ArrayList<>();
        Log.d(TAG, "üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤: " + this.accounts.size() + " —ç–ª–µ–º–µ–Ω—Ç–æ–≤");
        notifyDataSetChanged();
    }
    
    /**
     * –í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞
     */
    public void setSelectionMode(boolean enabled) {
        this.isSelectionMode = enabled;
        if (!enabled) {
            selectedAccounts.clear();
        }
        notifyDataSetChanged();
        // –°–æ–æ–±—â–∞–µ–º –Ω–∞—Ä—É–∂—É –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
        if (externalSelectedAccountsChanged != null) {
            externalSelectedAccountsChanged.onSelectedAccountsChanged(getSelectedAccounts());
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–∞
     */
    public List<Account> getSelectedAccounts() {
        List<Account> selected = new ArrayList<>();
        for (Integer id : selectedAccounts) {
            Account account = findAccountById(id);
            if (account != null) {
                selected.add(account);
            }
        }
        return selected;
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç –≤—ã–±–æ—Ä
     */
    public void clearSelection() {
        selectedAccounts.clear();
        notifyDataSetChanged();
        if (externalSelectedAccountsChanged != null) {
            externalSelectedAccountsChanged.onSelectedAccountsChanged(getSelectedAccounts());
        }
    }
    
    /**
     * –ù–∞—Ö–æ–¥–∏—Ç —Å—á–µ—Ç –ø–æ ID
     */
    private Account findAccountById(int id) {
        for (Account account : accounts) {
            if (account.getId() == id) {
                return account;
            }
        }
        return null;
    }
} 