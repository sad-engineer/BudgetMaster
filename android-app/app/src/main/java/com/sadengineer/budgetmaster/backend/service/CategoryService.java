package com.sadengineer.budgetmaster.backend.service;

import android.content.Context;
import android.util.Log;

import androidx.lifecycle.LiveData;
import androidx.room.Transaction;

import com.sadengineer.budgetmaster.backend.entity.Category;
import com.sadengineer.budgetmaster.backend.entity.EntityFilter;
import com.sadengineer.budgetmaster.backend.repository.CategoryRepository;
import com.sadengineer.budgetmaster.backend.constants.ServiceConstants;

import java.time.LocalDateTime;

import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 * Service –∫–ª–∞—Å—Å –¥–ª—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å Category
 */
public class CategoryService {
    private static final String TAG = "CategoryService";
    
    private final CategoryRepository repo;
    private final ExecutorService executorService;
    private final String user;
    private final ServiceConstants constants;
    
    public CategoryService(Context context, String user) {
        this.repo = new CategoryRepository(context);
        this.executorService = Executors.newFixedThreadPool(4);
        this.user = user;
        this.constants = new ServiceConstants();
    }

    /**
     * –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     * @param category –∫–∞—Ç–µ–≥–æ—Ä–∏—è
     * @param newPosition –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
     */
    public void changePosition(Category category, int newPosition) {
        executorService.execute(() -> {
            changePositionInTransaction(category, newPosition);
        });
    }
    
    /**
     * –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     * @param category –∫–∞—Ç–µ–≥–æ—Ä–∏—è
     * @param newPosition –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
     */
    @Transaction
    private void changePositionInTransaction(Category category, int newPosition) {
        int oldPosition = category.getPosition();
        
        // –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if (oldPosition == newPosition) {
            return;
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥—ã —Å–¥–≤–∏–≥–∞ –ø–æ–∑–∏—Ü–∏–π –∏–∑ Repository
        if (oldPosition < newPosition) {
            repo.shiftPositionsDown(oldPosition);
            repo.shiftPositionsUp(newPosition + 1);
        } else {
            repo.shiftPositionsUp(newPosition);
            repo.shiftPositionsDown(oldPosition);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å—á–µ—Ç–∞
        category.setPosition(newPosition);
        repo.update(category);
    }
    
    /**
     * –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Å—Ç–∞—Ä–æ–π –ø–æ–∑–∏—Ü–∏–∏
     * @param oldPosition —Å—Ç–∞—Ä–∞—è –ø–æ–∑–∏—Ü–∏—è
     * @param newPosition –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
     */
    public void changePosition(int oldPosition, int newPosition) {
        Category category = repo.getByPosition(oldPosition).getValue();
        if (category != null) {
            changePosition(category, newPosition);
        }
    }
    
    /**
     * –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
     * @param title –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     * @param newPosition –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
     */
    public void changePosition(String title, int newPosition) {
        Category category = repo.getByTitle(title).getValue();
        if (category != null) {
            changePosition(category, newPosition);
        }
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é
     * @param title –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     * @param operationType —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
     * @param type —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     * @param parentId ID —Ä–æ–¥–∏—Ç–µ–ª—è
     */
    public void create(String title, Integer operationType, Integer type, Integer parentId) {
        if (title == null || title.trim().isEmpty()) {
            throw new IllegalArgumentException("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        }
        executorService.execute(() -> {
            try {
                // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –í–ù–£–¢–†–ò lambda
                int finalOperationType = operationType;
                int finalType = type;
                int finalParentId = parentId;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if (operationType == null || operationType <= 0) {
                    Log.d(TAG, "–î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ " + title + " –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
                    finalOperationType = constants.DEFAULT_CATEGORY_OPERATION_TYPE;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if (type == null || type <= 0) {
                    Log.d(TAG, "–î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ " + title + " –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
                    finalType = constants.DEFAULT_CATEGORY_TYPE;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ ID —Ä–æ–¥–∏—Ç–µ–ª—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if (parentId == null || parentId <= 0) {
                    Log.d(TAG, "–î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ " + title + " –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ ID —Ä–æ–¥–∏—Ç–µ–ª—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
                    finalParentId = constants.DEFAULT_PARENT_CATEGORY_ID;
                }

                createCategoryInTransaction(title, finalOperationType, finalType, finalParentId);
            } catch (Exception e) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: " + e.getMessage(), e);
            }
        });
    }   

    /**
     * –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     * @param title –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     * @param operationType —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
     * @param type —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     * @param parentId ID —Ä–æ–¥–∏—Ç–µ–ª—è
     */
    @Transaction
    private void createCategoryInTransaction(String title, int operationType, int type, int parentId) {
        Log.d(TAG, "üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: " + title);
        Category category = new Category();
        category.setTitle(title);
        category.setOperationType(operationType);
        category.setType(type);
        category.setParentId(parentId);
        category.setPosition(repo.getMaxPosition() + 1);
        category.setCreateTime(LocalDateTime.now());
        category.setCreatedBy(user);
        repo.insert(category);
        Log.d(TAG, "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è " + title + " —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞");
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     * @param title –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    public void create(String title) {
        if (title == null || title.trim().isEmpty()) {
            throw new IllegalArgumentException("–ù–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        }
        executorService.execute(() -> {
            try {
                String trimmedTitle = title.trim();
                create(trimmedTitle, null, null, null);                
            } catch (Exception e) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '" + title + "': " + e.getMessage(), e);
            }
        });
    }

     /**
     * –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ë–î)
     * @param category –∫–∞—Ç–µ–≥–æ—Ä–∏—è
     */
    private void delete(Category category) {
        if (category == null) {
            Log.e(TAG, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –£–¥–∞–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ");
            return;
        }
        executorService.execute(() -> {
            try {
                deleteCategoryInTransaction(category);
            } catch (Exception e) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '" + category.getTitle() + "': " + e.getMessage(), e);
            }
        });
    }     
    
    /**
     * –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     * @param category –∫–∞—Ç–µ–≥–æ—Ä–∏—è
     */
    @Transaction
    private void deleteCategoryInTransaction(Category category) {
        Log.d(TAG, "üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: " + category.getTitle());
        int deletedPosition = category.getPosition();
        repo.delete(category);
        Log.d(TAG, "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è " + category.getTitle() + " —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞");
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ë–î)
     * @param softDelete true - soft delete, false - –ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
     * @param category –∫–∞—Ç–µ–≥–æ—Ä–∏—è
     */
    public void delete(boolean softDelete, Category category) {
        if (softDelete) {
            softDelete(category);
        } else {
            delete(category);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     * @param filter —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     * @return LiveData —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    public LiveData<List<Category>> getAll(EntityFilter filter) {
        return repo.getAll(filter);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≤–∫–ª—é—á–∞—è —É–¥–∞–ª–µ–Ω–Ω—ã–µ)
     * @return LiveData —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    public LiveData<List<Category>> getAll() {
        return repo.getAll();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Ç–∏–ø—É –æ–ø–µ—Ä–∞—Ü–∏–∏
     * @param operationType —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
     * @param filter —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     * @return LiveData —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    public LiveData<List<Category>> getAllByOperationType(int operationType, EntityFilter filter) { 
        return repo.getAllByOperationType(operationType, filter);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID —Ä–æ–¥–∏—Ç–µ–ª—è
     * @param parentId ID —Ä–æ–¥–∏—Ç–µ–ª—è
     * @param filter —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π       
     * @return LiveData —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    public LiveData<List<Category>> getAllByParentId(int parentId, EntityFilter filter) {
        return repo.getAllByParentId(parentId, filter);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Ç–∏–ø—É
     * @param type —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     * @param filter —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     * @return LiveData —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    public LiveData<List<Category>> getAllByType(String type, EntityFilter filter) {
        return repo.getAllByType(type, filter);
    }   

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID
     * @param id ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     * @return LiveData —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
     */
    public LiveData<Category> getById(int id) {
        return repo.getById(id);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
     * @param title –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     * @return LiveData —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
     */
    public LiveData<Category> getByTitle(String title) {
        return repo.getByTitle(title);
    }

    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (soft delete)
     * @param deletedCategory —É–¥–∞–ª–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
     */
    public void restore(Category deletedCategory) {
        executorService.execute(() -> {
            try {
                restoreCategoryInTransaction(deletedCategory);
            } catch (Exception e) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: " + e.getMessage(), e);
            }
        });
    }
    
    /**
     * –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     * @param deletedCategory —É–¥–∞–ª–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
     */
    @Transaction
    private void restoreCategoryInTransaction(Category deletedCategory) {
        if (deletedCategory != null) {
            Log.d(TAG, "üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ " + deletedCategory.getTitle());
            deletedCategory.setPosition(repo.getMaxPosition() + 1);
            deletedCategory.setDeleteTime(null);
            deletedCategory.setDeletedBy(null);
            deletedCategory.setUpdateTime(LocalDateTime.now());
            deletedCategory.setUpdatedBy(user);
            repo.update(deletedCategory);
            Log.d(TAG, "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è " + deletedCategory.getTitle() + " —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
        } else {
            Log.e(TAG, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è");
        }
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é (soft delete)
     * @param category –∫–∞—Ç–µ–≥–æ—Ä–∏—è
     */
    private void softDelete(Category category) {
        if (category == null) {
            Log.e(TAG, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è soft delete. –£–¥–∞–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ");
            return;
        }   
        executorService.execute(() -> {
            try {
                softDeleteCategoryInTransaction(category);
            } catch (Exception e) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ soft delete –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: " + e.getMessage(), e);
            }
        });
    }

    /**
     * –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (soft delete)
     * @param category –∫–∞—Ç–µ–≥–æ—Ä–∏—è
     */
    @Transaction
    private void softDeleteCategoryInTransaction(Category category) {
        Log.d(TAG, "üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ softDelete –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ " + category.getTitle());
        int deletedPosition = category.getPosition();
        category.setPosition(0);
        category.setDeleteTime(LocalDateTime.now());
        category.setDeletedBy(user);
        repo.update(category);
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ soft delete
        repo.shiftPositionsDown(deletedPosition);
        Log.d(TAG, "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è " + category.getTitle() + " —É—Å–ø–µ—à–Ω–æ soft deleted");
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
     * @param category –∫–∞—Ç–µ–≥–æ—Ä–∏—è
     */
    public void update(Category category) {
        if (category == null) {
            Log.e(TAG, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ");
            return;
        }

        executorService.execute(() -> {
            try {
                Log.d(TAG, "üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ " + category.getTitle());
                category.setUpdateTime(LocalDateTime.now());
                category.setUpdatedBy(user);
                repo.update(category);
                Log.d(TAG, "‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ " + category.getTitle() + " —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
            } catch (Exception e) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ " + category.getTitle() + ": " + e.getMessage(), e);
            }
        });
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     * @param filter —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     * @return –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    public int getCount(EntityFilter filter) {
        return repo.getCount(filter);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–≤–∫–ª—é—á–∞—è —É–¥–∞–ª–µ–Ω–Ω—ã–µ)
     * @return –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    public int getCount() {
        return repo.getCount();
    }
    
    /**
     * –ó–∞–∫—Ä—ã—Ç—å ExecutorService
     */
    public void shutdown() {
        executorService.shutdown();
    }
}   