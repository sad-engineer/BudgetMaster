
package com.sadengineer.budgetmaster.backend.service;

import android.content.Context;
import android.util.Log;

import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;

import com.sadengineer.budgetmaster.backend.entity.Account;
import com.sadengineer.budgetmaster.backend.repository.AccountRepository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 * Service –∫–ª–∞—Å—Å –¥–ª—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å Account
 */
public class AccountService {
    private static final String TAG = "AccountService";
    
    private final AccountRepository repo;
    private final ExecutorService executorService;
    private final String user;
    
    public AccountService(Context context, String user) {
        this.repo = new AccountRepository(context);
        this.executorService = Executors.newFixedThreadPool(4);
        this.user = user;
    }

    /**
     * –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é —Å—á–µ—Ç–∞ (—Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞)
     * @param account —Å—á–µ—Ç
     * @param newPosition –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
     */
    public void changePosition(Account account, int newPosition) {
        executorService.execute(() -> {
            int oldPosition = account.getPosition();
            
            // –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            if (oldPosition == newPosition) {
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—á–µ—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏—è
            List<Account> allAccounts = repo.getAll().getValue();
            if (allAccounts == null) {
                throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤");
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞
            int maxPosition = allAccounts.size();
            if (newPosition < 1 || newPosition > maxPosition) {
                throw new IllegalArgumentException("–ü–æ–∑–∏—Ü–∏—è –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: " + maxPosition);
            }
            
            // –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
            if (oldPosition < newPosition) {
                // –î–≤–∏–≥–∞–µ–º —Å—á–µ—Ç –≤–Ω–∏–∑: —Å–¥–≤–∏–≥–∞–µ–º —Å—á–µ—Ç–∞ –º–µ–∂–¥—É —Å—Ç–∞—Ä–æ–π –∏ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–µ–π –≤–≤–µ—Ä—Ö
                for (Account a : allAccounts) {
                    if (a.getId() != account.getId() && 
                        a.getPosition() > oldPosition && 
                        a.getPosition() <= newPosition) {
                        a.setPosition(a.getPosition() - 1);
                        repo.update(a);
                    }
                }
            } else {
                // –î–≤–∏–≥–∞–µ–º —Å—á–µ—Ç –≤–≤–µ—Ä—Ö: —Å–¥–≤–∏–≥–∞–µ–º —Å—á–µ—Ç–∞ –º–µ–∂–¥—É –Ω–æ–≤–æ–π –∏ —Å—Ç–∞—Ä–æ–π –ø–æ–∑–∏—Ü–∏–µ–π –≤–Ω–∏–∑
                for (Account a : allAccounts) {
                    if (a.getId() != account.getId() && 
                        a.getPosition() >= newPosition && 
                        a.getPosition() < oldPosition) {
                        a.setPosition(a.getPosition() + 1);
                        repo.update(a);
                    }
                }
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å—á–µ—Ç–∞
            account.setPosition(newPosition);
            repo.update(account);
        });
    }
    
    /**
     * –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é —Å—á–µ—Ç–∞ –ø–æ —Å—Ç–∞—Ä–æ–π –ø–æ–∑–∏—Ü–∏–∏
     * @param oldPosition —Å—Ç–∞—Ä–∞—è –ø–æ–∑–∏—Ü–∏—è
     * @param newPosition –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
     */
    public void changePosition(int oldPosition, int newPosition) {
        Account account = repo.getByPosition(oldPosition).getValue();
        if (account != null) {
            changePosition(account, newPosition);
        }
    }
    
    /**
     * –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é —Å—á–µ—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
     * @param title –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞
     * @param newPosition –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
     */
    public void changePosition(String title, int newPosition) {
        Account account = repo.getByTitle(title).getValue();
        if (account != null) {
            changePosition(account, newPosition);
        }
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—á–µ—Ç
     * @param title –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞
     */
    public void create(String title) {
        if (title == null || title.trim().isEmpty()) {
            throw new IllegalArgumentException("–ù–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        }
        
        executorService.execute(() -> {
            try {
                Log.d(TAG, "üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞: " + title);
                
                String trimmedTitle = title.trim();
                Account account = new Account();
                account.setTitle(trimmedTitle);
                account.setPosition(repo.getMaxPosition() + 1);
                account.setCreateTime(LocalDateTime.now());
                account.setCreatedBy(user);
                
                // –í—Å—Ç–∞–≤–ª—è–µ–º —Å—á–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                repo.insert(account);
                
                Log.d(TAG, "‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: " + account.getTitle());
                
            } catch (Exception e) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ '" + title + "': " + e.getMessage(), e);
            }
        });
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—á–µ—Ç
     * @param title –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞
     * @param currencyId ID –≤–∞–ª—é—Ç—ã
     * @param amount —Å—É–º–º–∞
     * @param type —Ç–∏–ø —Å—á–µ—Ç–∞
     */
    public void create(String title, int currencyId, int amount, int type) {
        if (title == null || title.trim().isEmpty()) {
            throw new IllegalArgumentException("–ù–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        }
        
        executorService.execute(() -> {
            try {
                Log.d(TAG, "üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞: " + title);
                
                String trimmedTitle = title.trim();
                Account account = new Account();
                account.setTitle(trimmedTitle);
                account.setCurrencyId(currencyId);
                account.setAmount(amount);
                account.setType(type);
                account.setPosition(repo.getMaxPosition() + 1);
                account.setCreateTime(LocalDateTime.now());
                account.setCreatedBy(user); 
                
                // –í—Å—Ç–∞–≤–ª—è–µ–º —Å—á–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                repo.insert(account);
                
                Log.d(TAG, "‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: " + account.getTitle());
                
            } catch (Exception e) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ '" + title + "': " + e.getMessage(), e);
            }
        });
    }

     /**
     * –£–¥–∞–ª–∏—Ç—å —Å—á–µ—Ç (–ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ë–î)
     * @param account —Å—á–µ—Ç
     */
    public void delete(Account account) {
        executorService.execute(() -> {
            try {
                Log.d(TAG, "üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞: " + account.getTitle());

                if (account != null) {
                    repo.delete(account);
                }

                Log.d(TAG, "‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: " + account.getTitle());
            } catch (Exception e) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—á–µ—Ç–∞ '" + account.getTitle() + "': " + e.getMessage(), e);
            }
        });
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—á–µ—Ç–∞
     * @return LiveData —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤
     */
    public LiveData<List<Account>> getAll() {
        return repo.getAll();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—á–µ—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
     * @param title –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞
     * @return LiveData —Å —Å—á–µ—Ç–æ–º
     */
    public LiveData<Account> getByTitle(String title) {
        return repo.getByTitle(title);
    }

    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç (soft delete)
     * @param deletedAccount —É–¥–∞–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç
     */
    public void restore(Account deletedAccount) {
        executorService.execute(() -> {
            try {
                Log.d(TAG, "üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞: " + deletedAccount.getTitle());

                if (deletedAccount != null) {
                    int position = deletedAccount.getPosition();
                    deletedAccount.setPosition(position);
                    deletedAccount.setDeleteTime(null);
                    deletedAccount.setDeletedBy(null);
                    deletedAccount.setUpdateTime(LocalDateTime.now());
                    deletedAccount.setUpdatedBy(user);
                    repo.update(deletedAccount);
                }

                Log.d(TAG, "‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: " + deletedAccount.getTitle());
            } catch (Exception e) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç–∞ '" + deletedAccount.getTitle() + "': " + e.getMessage(), e);
            }
        });
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å —Å—á–µ—Ç (soft delete)
     * @param account —Å—á–µ—Ç
     */
    public void softDelete(Account account) {
        executorService.execute(() -> {
            try {
                Log.d(TAG, "üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ softDelete —Å—á–µ—Ç–∞: " + account.getTitle());
                    
                if (account != null) {
                    account.setPosition(0);
                    account.setDeleteTime(LocalDateTime.now());
                    account.setDeletedBy(user);
                    repo.update(account);
                }

                Log.d(TAG, "‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ softDelete —Å—á–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: " + account.getTitle());
            } catch (Exception e) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ softDelete —Å—á–µ—Ç–∞ '" + account.getTitle() + "': " + e.getMessage(), e);
            }
        });
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç
     * @param account —Å—á–µ—Ç
     */
    public void update(Account account) {
        executorService.execute(() -> {
            try {
                Log.d(TAG, "üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞: " + account.getTitle());

                if (account != null) {
                    account.setUpdateTime(LocalDateTime.now());
                    account.setUpdatedBy(user);
                    repo.update(account);
                }

                Log.d(TAG, "‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: " + account.getTitle());
            } catch (Exception e) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç–∞ '" + account.getTitle() + "': " + e.getMessage(), e);
            }
        });
    }
} 