// -*- coding: utf-8 -*-
package com.sadengineer.budgetmaster.backend.service;

import android.content.Context;
import android.util.Log;

import androidx.lifecycle.LiveData;

import com.sadengineer.budgetmaster.backend.entity.Currency;
import com.sadengineer.budgetmaster.backend.repository.CurrencyRepository;
import com.sadengineer.budgetmaster.backend.constants.ModelConstants;


import java.time.LocalDateTime;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.CompletableFuture;

/**
 * Service –∫–ª–∞—Å—Å –¥–ª—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å Currency
 */
public class CurrencyService {
    private static final String TAG = "CurrencyService";

    private final CurrencyRepository repo;
    private final ExecutorService executorService;
    private final String user;
    private final int defaultCurrencyID;
    
    public CurrencyService(Context context, String user) {
        this.repo = new CurrencyRepository(context);
        this.executorService = Executors.newFixedThreadPool(4);
        this.user = user;
        this.defaultCurrencyID = ModelConstants.DEFAULT_CURRENCY_ID;
    }

    /**
     * –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤–∞–ª—é—Ç—ã (—Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞)
     * @param currency –≤–∞–ª—é—Ç–∞
     * @param newPosition –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
     */
    public void changePosition(Currency currency, int newPosition) {
        executorService.execute(() -> {
            int oldPosition = currency.getPosition();
            
            // –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            if (oldPosition == newPosition) {
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∞–ª—é—Ç—ã –¥–ª—è –ø–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏—è
            List<Currency> allCurrencies = repo.getAll().getValue();
            if (allCurrencies == null) {
                throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç");
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞
            int maxPosition = allCurrencies.size();
            if (newPosition < 1 || newPosition > maxPosition) {
                throw new IllegalArgumentException("–ü–æ–∑–∏—Ü–∏—è –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: " + maxPosition);
            }
            
            // –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
            if (oldPosition < newPosition) {
                // –î–≤–∏–≥–∞–µ–º –≤–∞–ª—é—Ç—É –≤–Ω–∏–∑: —Å–¥–≤–∏–≥–∞–µ–º –≤–∞–ª—é—Ç—ã –º–µ–∂–¥—É —Å—Ç–∞—Ä–æ–π –∏ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–µ–π –≤–≤–µ—Ä—Ö
                for (Currency c : allCurrencies) {
                    if (c.getId() != currency.getId() && 
                        c.getPosition() > oldPosition && 
                        c.getPosition() <= newPosition) {
                        c.setPosition(c.getPosition() - 1);
                        repo.update(c);
                    }
                }
            } else {
                // –î–≤–∏–≥–∞–µ–º –≤–∞–ª—é—Ç—É –≤–≤–µ—Ä—Ö: —Å–¥–≤–∏–≥–∞–µ–º –≤–∞–ª—é—Ç—ã –º–µ–∂–¥—É –Ω–æ–≤–æ–π –∏ —Å—Ç–∞—Ä–æ–π –ø–æ–∑–∏—Ü–∏–µ–π –≤–Ω–∏–∑
                for (Currency c : allCurrencies) {
                    if (c.getId() != currency.getId() && 
                        c.getPosition() >= newPosition && 
                        c.getPosition() < oldPosition) {
                        c.setPosition(c.getPosition() + 1);
                        repo.update(c);
                    }
                }
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–∞–ª—é—Ç—ã
            currency.setPosition(newPosition);
            repo.update(currency);
        });
    }
    
    /**
     * –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤–∞–ª—é—Ç—ã –ø–æ —Å—Ç–∞—Ä–æ–π –ø–æ–∑–∏—Ü–∏–∏
     * @param oldPosition —Å—Ç–∞—Ä–∞—è –ø–æ–∑–∏—Ü–∏—è
     * @param newPosition –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
     */
    public void changePosition(int oldPosition, int newPosition) {
        executorService.execute(() -> {
            Currency currency = repo.getByPosition(oldPosition).getValue();
            if (currency != null) {
                changePosition(currency, newPosition);
            }
        });
    }
    
    /**
     * –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤–∞–ª—é—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
     * @param title –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
     * @param newPosition –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
     */
    public void changePosition(String title, int newPosition) {
        executorService.execute(() -> {
            Currency currency = repo.getByTitle(title).getValue();
            if (currency != null) {
                changePosition(currency, newPosition);
            }
        });
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–∞–ª—é—Ç—É
     * @param title –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
     */
    public void create(String title) {
        if (title == null || title.trim().isEmpty()) {
            throw new IllegalArgumentException("–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        }
        
        executorService.execute(() -> {
            try {
                Log.d(TAG, "üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã: " + title);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞
                if (repo == null) {
                    throw new RuntimeException("Repository –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
                }
                
                String trimmedTitle = title.trim();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–ª—é—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                Currency existingCurrency = repo.getByTitle(trimmedTitle).getValue();
                if (existingCurrency != null) {
                    Log.w(TAG, "‚ö†Ô∏è –í–∞–ª—é—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '" + trimmedTitle + "' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: " + existingCurrency.getId() + ")");
                    return;
                }
                
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∞–ª—é—Ç—É
                Currency currency = new Currency();
                currency.setTitle(trimmedTitle);
                currency.setPosition(repo.getMaxPosition() + 1);
                currency.setCreateTime(LocalDateTime.now());
                currency.setCreatedBy(user);
                
                Log.d(TAG, "üìù –°–æ–∑–¥–∞–Ω–∞ –≤–∞–ª—é—Ç–∞: " + currency.getTitle() + " (–ø–æ–∑–∏—Ü–∏—è: " + currency.getPosition() + ")");
                
                // –í—Å—Ç–∞–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                repo.insert(currency);
                
                Log.d(TAG, "‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: " + currency.getTitle());
                
            } catch (Exception e) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞–ª—é—Ç—ã '" + title + "': " + e.getMessage(), e);
            }
        });
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É (–ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ë–î)
     * @param currency –≤–∞–ª—é—Ç–∞
     */
    public void delete(Currency currency) {
        executorService.execute(() -> {
            if (currency != null) {
                repo.delete(currency);
            }
        });
    }     
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–∞–ª—é—Ç—ã
     * @return LiveData —Å —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –≤–∞–ª—é—Ç
     */
    public LiveData<List<Currency>> getAll() {
        return repo.getAll();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤–∞–ª—é—Ç—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
     * @param title –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
     * @return LiveData —Å –≤–∞–ª—é—Ç–æ–π
     */
    public LiveData<Currency> getByTitle(String title) {
        return repo.getByTitle(title);
    }

    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–Ω—É—é –≤–∞–ª—é—Ç—É (soft delete)
     * @param deletedCurrency —É–¥–∞–ª–µ–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞
     */
    public void restore(Currency deletedCurrency) {
        executorService.execute(() -> {
            if (deletedCurrency != null) {
                // –û—á–∏—â–∞–µ–º –ø–æ–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                deletedCurrency.setDeleteTime(null);
                deletedCurrency.setDeletedBy(null);
                deletedCurrency.setUpdateTime(LocalDateTime.now());
                deletedCurrency.setUpdatedBy(user);
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É –≤ –±–∞–∑–µ
                repo.update(deletedCurrency);
            }
        });
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É (soft delete)
     * @param currency –≤–∞–ª—é—Ç–∞
     */
    public void softDelete(Currency currency) {
        executorService.execute(() -> {
            if (currency != null) {
                currency.setDeleteTime(LocalDateTime.now());
                currency.setDeletedBy(user);
                repo.update(currency);
            }
        });
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –≤–∞–ª—é—Ç—É
     * @param currency –≤–∞–ª—é—Ç–∞
     */
    public void update(Currency currency) {
        executorService.execute(() -> {
            if (currency != null) {
                currency.setUpdateTime(LocalDateTime.now());
                currency.setUpdatedBy(user);
                repo.update(currency);
            }
        });
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤–∞–ª—é—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 
     * @return LiveData —Å –≤–∞–ª—é—Ç–æ–π
     */
    public LiveData<Currency> getDefaultCurrency() {
        return repo.getById(defaultCurrencyID);
    }
} 