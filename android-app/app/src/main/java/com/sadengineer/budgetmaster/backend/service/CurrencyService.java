package com.sadengineer.budgetmaster.backend.service;

import android.content.Context;
import android.util.Log;

import androidx.lifecycle.LiveData;
import androidx.room.Transaction;

import com.sadengineer.budgetmaster.backend.entity.Currency;
import com.sadengineer.budgetmaster.backend.entity.EntityFilter;
import com.sadengineer.budgetmaster.backend.repository.CurrencyRepository;
import com.sadengineer.budgetmaster.backend.constants.ModelConstants;
import com.sadengineer.budgetmaster.backend.validator.CurrencyValidator;

import java.time.LocalDateTime;

import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 * Service –∫–ª–∞—Å—Å –¥–ª—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å Currency
 */
public class CurrencyService {
    private static final String TAG = "CurrencyService";

    private final CurrencyRepository repo;
    private final ExecutorService executorService;
    private final String user;
    private final int defaultCurrencyID;
    
    public CurrencyService(Context context, String user) {
        this.repo = new CurrencyRepository(context);
        this.executorService = Executors.newFixedThreadPool(4);
        this.user = user;
        this.defaultCurrencyID = ModelConstants.DEFAULT_CURRENCY_ID;
    }

    /**
     * –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤–∞–ª—é—Ç—ã
     * @param currency –≤–∞–ª—é—Ç–∞
     * @param newPosition –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
     */
    public void changePosition(Currency currency, int newPosition) {
        executorService.execute(() -> {
            changePositionInTransaction(currency, newPosition);
        });
    }
    
    /**
     * –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤–∞–ª—é—Ç—ã
     * @param currency –≤–∞–ª—é—Ç–∞
     * @param newPosition –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
     */
    @Transaction
    private void changePositionInTransaction(Currency currency, int newPosition) {
        int oldPosition = currency.getPosition();
        
        // –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if (oldPosition == newPosition) {
            return;
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥—ã —Å–¥–≤–∏–≥–∞ –ø–æ–∑–∏—Ü–∏–π –∏–∑ Repository
        if (oldPosition < newPosition) {
            repo.shiftPositionsDown(oldPosition);
            repo.shiftPositionsUp(newPosition + 1);
        } else {
            repo.shiftPositionsUp(newPosition);
            repo.shiftPositionsDown(oldPosition);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–∞–ª—é—Ç—ã
        currency.setPosition(newPosition);
        repo.update(currency);
    }
    
    /**
     * –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤–∞–ª—é—Ç—ã –ø–æ —Å—Ç–∞—Ä–æ–π –ø–æ–∑–∏—Ü–∏–∏
     * @param oldPosition —Å—Ç–∞—Ä–∞—è –ø–æ–∑–∏—Ü–∏—è
     * @param newPosition –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
     */
    public void changePosition(int oldPosition, int newPosition) {
        Currency currency = repo.getByPosition(oldPosition).getValue();
        if (currency != null) {
            changePosition(currency, newPosition);
        }
    }  

    /**
     * –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤–∞–ª—é—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
     * @param title –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
     * @param newPosition –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
     */
    public void changePosition(String title, int newPosition) {
        Currency currency = repo.getByTitle(title).getValue();
        if (currency != null) {
            changePosition(currency, newPosition);
        }
    }
    
    /**
     * –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤–∞–ª—é—Ç—ã –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É –∏–º–µ–Ω–∏
     * @param shortName –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –≤–∞–ª—é—Ç—ã
     * @param newPosition –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
     */
    public void changePositionByShortName(String shortName, int newPosition) {
        Currency currency = repo.getByShortName(shortName).getValue();
        if (currency != null) {
            changePosition(currency, newPosition);
        }
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–∞–ª—é—Ç—É –±–µ–∑ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–º–µ–Ω–∏
     * –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å 
     * @param title –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
     */
    public void create(String title) {
        String trimmedTitle = title.trim();
        CurrencyValidator.validateTitle(trimmedTitle);
        executorService.execute(() -> {
            try {
                createCurrencyInTransaction(trimmedTitle, null);                
            } catch (Exception e) {
                Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞–ª—é—Ç—ã '" + title + "': " + e.getMessage(), e);
            }
        });
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–∞–ª—é—Ç—É —Å –∫–æ—Ä–æ—Ç–∫–∏–º –∏–º–µ–Ω–µ–º
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–º–µ–Ω–∏
     * @param title –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
     * @param shortName –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –≤–∞–ª—é—Ç—ã
     */
    public void create(String title, String shortName) {
        String trimmedTitle = title.trim();
        String trimmedShortName = shortName != null ? shortName.trim() : null;
        CurrencyValidator.validateTitle(trimmedTitle);
        CurrencyValidator.validateShortName(trimmedShortName);
        executorService.execute(() -> {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
                if (repo.existsByTitle(trimmedTitle)) {
                    Log.e(TAG, "–í–∞–ª—é—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '" + trimmedTitle + "' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
                    return;
                }
                
                if (trimmedShortName != null && repo.existsByShortName(trimmedShortName)) {
                    Log.e(TAG, "–í–∞–ª—é—Ç–∞ —Å –∫–æ—Ä–æ—Ç–∫–∏–º –∏–º–µ–Ω–µ–º '" + trimmedShortName + "' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
                    return;
                }
                
                createCurrencyInTransaction(trimmedTitle, trimmedShortName);                
            } catch (Exception e) {
                Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞–ª—é—Ç—ã '" + title + "': " + e.getMessage(), e);
            }
        });
    }
    
    /**
     * –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≤–∞–ª—é—Ç—ã
     * @param title –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
     * @param shortName –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –≤–∞–ª—é—Ç—ã
     */
    @Transaction
    private void createCurrencyInTransaction(String title, String shortName) {
        Log.d(TAG, "üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã: " + title + (shortName != null ? " (" + shortName + ")" : ""));
        Currency currency = new Currency();
        currency.setTitle(title);
        currency.setShortName(shortName);
        currency.setPosition(repo.getMaxPosition() + 1);
        currency.setCreateTime(LocalDateTime.now());
        currency.setCreatedBy(user);
        repo.insert(currency);
        Log.d(TAG, "‚úÖ –í–∞–ª—é—Ç–∞ " + currency.getTitle() + " —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞");
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É (–ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ë–î)
     * @param softDelete true - soft delete, false - –ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
     * @param currency –≤–∞–ª—é—Ç–∞
     */
    public void delete(boolean softDelete, Currency currency) {
        if (softDelete) {
            softDelete(currency);
        } else {
            delete(currency);
        }
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É (–ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ë–î)
     * @param currency –≤–∞–ª—é—Ç–∞
     */
    private void delete(Currency currency) {
        if (currency == null) {
            Log.e(TAG, "–í–∞–ª—é—Ç–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –£–¥–∞–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ");
            return;
        }
        executorService.execute(() -> {
            try {
                deleteCurrencyInTransaction(currency);
            } catch (Exception e) {
                Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã '" + currency.getTitle() + "': " + e.getMessage(), e);
            }
        });
    }     
    
    /**
     * –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã
     * @param currency –≤–∞–ª—é—Ç–∞
     */
    @Transaction
    private void deleteCurrencyInTransaction(Currency currency) {
        Log.d(TAG, "üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã: " + currency.getTitle());
        int deletedPosition = currency.getPosition();
        repo.delete(currency);
        Log.d(TAG, "‚úÖ –í–∞–ª—é—Ç–∞ " + currency.getTitle() + " —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞");
    }
   
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–∞–ª—é—Ç—ã
     * @param filter —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –≤–∞–ª—é—Ç
     * @return LiveData —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –≤–∞–ª—é—Ç
     */
    public LiveData<List<Currency>> getAll(EntityFilter filter) {
        return repo.getAll(filter);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–∞–ª—é—Ç—ã (–≤–∫–ª—é—á–∞—è —É–¥–∞–ª–µ–Ω–Ω—ã–µ)
     * @return LiveData —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –≤–∞–ª—é—Ç
     */
    public LiveData<List<Currency>> getAll() {
        return repo.getAll();
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤–∞–ª—é—Ç—É –ø–æ ID
     * @param id ID –≤–∞–ª—é—Ç—ã
     * @return LiveData —Å –≤–∞–ª—é—Ç–æ–π
     */
    public LiveData<Currency> getById(int id) {
        return repo.getById(id);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤–∞–ª—é—Ç—É –ø–æ ID —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
     * @param id ID –≤–∞–ª—é—Ç—ã
     * @return –≤–∞–ª—é—Ç–∞
     */
    public Currency getByIdSync(int id) {
        return repo.getByIdSync(id);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤–∞–ª—é—Ç—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
     * @param title –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
     * @return LiveData —Å –≤–∞–ª—é—Ç–æ–π
     */
    public LiveData<Currency> getByTitle(String title) {
        return repo.getByTitle(title);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤–∞–ª—é—Ç—É –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É –∏–º–µ–Ω–∏
     * @param shortName –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –≤–∞–ª—é—Ç—ã
     * @return LiveData —Å –≤–∞–ª—é—Ç–æ–π
     */
    public LiveData<Currency> getByShortName(String shortName) {
        return repo.getByShortName(shortName);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
     * @param title –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
     * @return true –µ—Å–ª–∏ –≤–∞–ª—é—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, false –µ—Å–ª–∏ –Ω–µ—Ç
     */
    public boolean existsByTitle(String title) {
        return repo.existsByTitle(title);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ—Ä–æ—Ç–∫–∏–º –∏–º–µ–Ω–µ–º
     * @param shortName –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –≤–∞–ª—é—Ç—ã
     * @return true –µ—Å–ª–∏ –≤–∞–ª—é—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, false –µ—Å–ª–∏ –Ω–µ—Ç
     */
    public boolean existsByShortName(String shortName) {
        return repo.existsByShortName(shortName);
    }    

    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–Ω—É—é –≤–∞–ª—é—Ç—É (soft delete)
     * @param deletedCurrency —É–¥–∞–ª–µ–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞
     */
    public void restore(Currency deletedCurrency) {
        executorService.execute(() -> {
            try {
                restoreCurrencyInTransaction(deletedCurrency);
            } catch (Exception e) {
                Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã: " + e.getMessage(), e);
            }
        });
    }
    
    /**
     * –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã
     * @param deletedCurrency —É–¥–∞–ª–µ–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞
     */
    @Transaction
    private void restoreCurrencyInTransaction(Currency deletedCurrency) {
        if (deletedCurrency != null) {
            Log.d(TAG, "–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã " + deletedCurrency.getTitle());
            deletedCurrency.setPosition(repo.getMaxPosition() + 1);
            deletedCurrency.setDeleteTime(null);
            deletedCurrency.setDeletedBy(null);
            deletedCurrency.setUpdateTime(LocalDateTime.now());
            deletedCurrency.setUpdatedBy(user);
            repo.update(deletedCurrency);
            Log.d(TAG, "–í–∞–ª—é—Ç–∞ " + deletedCurrency.getTitle() + " —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
        } else {
            Log.e(TAG, "–í–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è");
        }
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É (soft delete)
     * @param currency –≤–∞–ª—é—Ç–∞
     */
    private void softDelete(Currency currency) {
        if (currency == null) {
            Log.e(TAG, "–í–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è soft delete. –£–¥–∞–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ");
            return;
        }   

        executorService.execute(() -> {
            try {
                softDeleteCurrencyInTransaction(currency);
            } catch (Exception e) {
                Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ soft delete –≤–∞–ª—é—Ç—ã: " + e.getMessage(), e);
            }
        });
    }
    
    /**
     * –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã (soft delete)
     * @param currency –≤–∞–ª—é—Ç–∞
     */
    @Transaction
    private void softDeleteCurrencyInTransaction(Currency currency) {
        Log.d(TAG, "–ó–∞–ø—Ä–æ—Å –Ω–∞ softDelete –≤–∞–ª—é—Ç—ã " + currency.getTitle());
        int deletedPosition = currency.getPosition();
        currency.setPosition(0);
        currency.setDeleteTime(LocalDateTime.now());
        currency.setDeletedBy(user);
        repo.update(currency);
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ soft delete
        repo.shiftPositionsDown(deletedPosition);
        Log.d(TAG, "‚úÖ –í–∞–ª—é—Ç–∞ " + currency.getTitle() + " —É—Å–ø–µ—à–Ω–æ soft deleted");
    }
    
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –≤–∞–ª—é—Ç—É
     * @param currency –≤–∞–ª—é—Ç–∞
     */
    public void update(Currency currency) {
        if (currency == null) {
            Log.e(TAG, "–í–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ");
            return;
        }

        executorService.execute(() -> {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â—É—é –≤–∞–ª—é—Ç—É)
                if (repo.existsByTitleExcludingId(currency.getTitle(), currency.getId())) {
                    Log.e(TAG, "–í–∞–ª—é—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '" + currency.getTitle() + "' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
                    return;
                }
                
                if (currency.getShortName() != null && repo.existsByShortNameExcludingId(currency.getShortName(), currency.getId())) {
                    Log.e(TAG, "–í–∞–ª—é—Ç–∞ —Å –∫–æ—Ä–æ—Ç–∫–∏–º –∏–º–µ–Ω–µ–º '" + currency.getShortName() + "' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
                    return;
                }
                
                Log.d(TAG, "–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã " + currency.getTitle());
                currency.setUpdateTime(LocalDateTime.now());
                currency.setUpdatedBy(user);
                repo.update(currency);
                Log.d(TAG, "–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ " + currency.getTitle() + " —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
            } catch (Exception e) {
                Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ " + currency.getTitle() + ": " + e.getMessage(), e);
            }
        });
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç
     * @param filter —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –≤–∞–ª—é—Ç
     * @return –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç
     */
    public int getCount(EntityFilter filter) {
        return repo.getCount(filter);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç (–≤–∫–ª—é—á–∞—è —É–¥–∞–ª–µ–Ω–Ω—ã–µ)
     * @return –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç
     */
    public int getCount() {
        return repo.getCount();
    }
    
    /**
     * –ó–∞–∫—Ä—ã—Ç—å ExecutorService
     */
    public void shutdown() {
        executorService.shutdown();
    }
} 